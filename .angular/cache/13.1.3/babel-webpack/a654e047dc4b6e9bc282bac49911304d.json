{"ast":null,"code":"import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalInjector, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, TemplateRef, Injectable, Injector, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nfunction DialogPosition() {}\n\nif (false) {\n  /**\n   * Override for the dialog's top position.\n   * @type {?|undefined}\n   */\n  DialogPosition.prototype.top;\n  /**\n   * Override for the dialog's bottom position.\n   * @type {?|undefined}\n   */\n\n  DialogPosition.prototype.bottom;\n  /**\n   * Override for the dialog's left position.\n   * @type {?|undefined}\n   */\n\n  DialogPosition.prototype.left;\n  /**\n   * Override for the dialog's right position.\n   * @type {?|undefined}\n   */\n\n  DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\n\n\nclass MatDialogConfig {\n  constructor() {\n    /**\n     * The ARIA role of the dialog element.\n     */\n    this.role = 'dialog';\n    /**\n     * Custom class for the overlay pane.\n     */\n\n    this.panelClass = '';\n    /**\n     * Whether the dialog has a backdrop.\n     */\n\n    this.hasBackdrop = true;\n    /**\n     * Custom class for the backdrop.\n     */\n\n    this.backdropClass = '';\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     */\n\n    this.disableClose = false;\n    /**\n     * Width of the dialog.\n     */\n\n    this.width = '';\n    /**\n     * Height of the dialog.\n     */\n\n    this.height = '';\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     */\n\n    this.maxWidth = '80vw';\n    /**\n     * Data being injected into the child component.\n     */\n\n    this.data = null;\n    /**\n     * ID of the element that describes the dialog.\n     */\n\n    this.ariaDescribedBy = null;\n    /**\n     * ID of the element that labels the dialog.\n     */\n\n    this.ariaLabelledBy = null;\n    /**\n     * Aria label to assign to the dialog element.\n     */\n\n    this.ariaLabel = null;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     */\n\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n\nif (false) {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   * @type {?}\n   */\n  MatDialogConfig.prototype.viewContainerRef;\n  /**\n   * ID for the dialog. If omitted, a unique one will be generated.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.id;\n  /**\n   * The ARIA role of the dialog element.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.role;\n  /**\n   * Custom class for the overlay pane.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.panelClass;\n  /**\n   * Whether the dialog has a backdrop.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.hasBackdrop;\n  /**\n   * Custom class for the backdrop.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.backdropClass;\n  /**\n   * Whether the user can use escape or clicking on the backdrop to close the modal.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.disableClose;\n  /**\n   * Width of the dialog.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.width;\n  /**\n   * Height of the dialog.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.height;\n  /**\n   * Min-width of the dialog. If a number is provided, assumes pixel units.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.minWidth;\n  /**\n   * Min-height of the dialog. If a number is provided, assumes pixel units.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.minHeight;\n  /**\n   * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.maxWidth;\n  /**\n   * Max-height of the dialog. If a number is provided, assumes pixel units.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.maxHeight;\n  /**\n   * Position overrides.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.position;\n  /**\n   * Data being injected into the child component.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.data;\n  /**\n   * Layout direction for the dialog's content.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.direction;\n  /**\n   * ID of the element that describes the dialog.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.ariaDescribedBy;\n  /**\n   * ID of the element that labels the dialog.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.ariaLabelledBy;\n  /**\n   * Aria label to assign to the dialog element.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.ariaLabel;\n  /**\n   * Whether the dialog should focus the first focusable element on open.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.autoFocus;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.restoreFocus;\n  /**\n   * Scroll strategy to be used for the dialog.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.scrollStrategy;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.closeOnNavigation;\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @type {?}\n   */\n\n  MatDialogConfig.prototype.componentFactoryResolver;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst matDialogAnimations = {\n  /**\n   * Animation that is applied on the dialog container by defalt.\n   */\n  dialogContainer: /*#__PURE__*/trigger('dialogContainer', [\n  /*#__PURE__*/\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    transform: 'none'\n  })), /*#__PURE__*/transition('* => enter', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  }))), /*#__PURE__*/transition('* => void, * => exit', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\n\n\nlet MatDialogContainer = /*#__PURE__*/(() => {\n  class MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n      super();\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._config = _config;\n      /**\n       * Element that was focused before the dialog was opened. Save this to restore upon close.\n       */\n\n      this._elementFocusedBeforeDialogWasOpened = null;\n      /**\n       * State of the dialog animation.\n       */\n\n      this._state = 'enter';\n      /**\n       * Emits when an animation state changes.\n       */\n\n      this._animationStateChanged = new EventEmitter();\n      /**\n       * Attaches a DOM portal to the dialog container.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * \\@breaking-change 10.0.0\n       */\n\n      this.attachDomPortal =\n      /**\n      * @param {?} portal\n      * @return {?}\n      */\n      portal => {\n        if (this._portalOutlet.hasAttached()) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        this._savePreviouslyFocusedElement();\n\n        return this._portalOutlet.attachDomPortal(portal);\n      };\n\n      this._ariaLabelledBy = _config.ariaLabelledBy || null;\n      this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n\n\n    attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n\n\n    attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n\n\n    _trapFocus() {\n      /** @type {?} */\n      const element = this._elementRef.nativeElement;\n\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(element);\n      } // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n\n\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      } else {\n        /** @type {?} */\n        const activeElement = this._document.activeElement; // Otherwise ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n\n        if (activeElement !== element && !element.contains(activeElement)) {\n          element.focus();\n        }\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n\n\n    _restoreFocus() {\n      /** @type {?} */\n      const toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n        /** @type {?} */\n        const activeElement = this._document.activeElement;\n        /** @type {?} */\n\n        const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          toFocus.focus();\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n\n\n    _savePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened =\n        /** @type {?} */\n        this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n        if (this._elementRef.nativeElement.focus) {\n          // Move focus onto the dialog immediately in order to prevent the user from accidentally\n          // opening multiple dialogs at the same time. Needs to be async, because the element\n          // may not be focusable immediately.\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          () => this._elementRef.nativeElement.focus());\n        }\n      }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationDone(event) {\n      if (event.toState === 'enter') {\n        this._trapFocus();\n      } else if (event.toState === 'exit') {\n        this._restoreFocus();\n      }\n\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationStart(event) {\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n\n\n    _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  MatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n    return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n  };\n\n  MatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    viewQuery: function MatDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  /** @nocollapse */\n\n  return MatDialogContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatDialogContainer.prototype._document;\n  /**\n   * The portal outlet inside of this container into which the dialog content will be loaded.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._portalOutlet;\n  /**\n   * The class that traps and manages focus within the dialog.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogContainer.prototype._focusTrap;\n  /**\n   * Element that was focused before the dialog was opened. Save this to restore upon close.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n  /**\n   * State of the dialog animation.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._state;\n  /**\n   * Emits when an animation state changes.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._animationStateChanged;\n  /**\n   * ID of the element that should be considered as the dialog's label.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._ariaLabelledBy;\n  /**\n   * ID for the container DOM element.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._id;\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * \\@param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype.attachDomPortal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogContainer.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogContainer.prototype._focusTrapFactory;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogContainer.prototype._changeDetectorRef;\n  /**\n   * The dialog configuration.\n   * @type {?}\n   */\n\n  MatDialogContainer.prototype._config;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n/** @type {?} */\n\n\nlet uniqueId = 0;\n/** @enum {number} */\n\nconst MatDialogState = {\n  OPEN: 0,\n  CLOSING: 1,\n  CLOSED: 2\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\n\nclass MatDialogRef {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} id\n   */\n  constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n\n    this._beforeClosed = new Subject();\n    /**\n     * Current state of the dialog.\n     */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'enter'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance =\n      /** @type {?} */\n      null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.preventDefault();\n      this.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'start'), take(1)).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._state = 2\n      /* CLOSED */\n      ;\n\n      this._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n\n    this._state = 1\n    /* CLOSING */\n    ;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @return {?}\n   */\n\n\n  afterOpened() {\n    return this._afterOpened.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   * @return {?}\n   */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @return {?}\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} position New dialog position.\n   * @return {THIS}\n   */\n\n\n  updatePosition(position) {\n    /** @type {?} */\n    let strategy =\n    /** @type {?} */\n    this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    /** @type {?} */\n    this._overlayRef.updatePosition();\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} width New width of the dialog.\n   * @param {?=} height New height of the dialog.\n   * @return {THIS}\n   */\n\n\n  updateSize(width = '', height = '') {\n    /** @type {?} */\n    this._getPositionStrategy().width(width).height(height);\n\n    /** @type {?} */\n    this._overlayRef.updatePosition();\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Add a CSS class or an array of classes to the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n\n\n  addPanelClass(classes) {\n    /** @type {?} */\n    this._overlayRef.addPanelClass(classes);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Remove a CSS class or an array of classes from the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n\n\n  removePanelClass(classes) {\n    /** @type {?} */\n    this._overlayRef.removePanelClass(classes);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Gets the current state of the dialog's lifecycle.\n   * @return {?}\n   */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Fetches the position strategy object from the overlay ref.\n   * @private\n   * @return {?}\n   */\n\n\n  _getPositionStrategy() {\n    return (\n      /** @type {?} */\n      this._overlayRef.getConfig().positionStrategy\n    );\n  }\n\n}\n\nif (false) {\n  /**\n   * The instance of component opened into the dialog.\n   * @type {?}\n   */\n  MatDialogRef.prototype.componentInstance;\n  /**\n   * Whether the user is allowed to close the dialog.\n   * @type {?}\n   */\n\n  MatDialogRef.prototype.disableClose;\n  /**\n   * Subject for notifying the user that the dialog has finished opening.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._afterOpened;\n  /**\n   * Subject for notifying the user that the dialog has finished closing.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._afterClosed;\n  /**\n   * Subject for notifying the user that the dialog has started closing.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._beforeClosed;\n  /**\n   * Result to be passed to afterClosed.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._result;\n  /**\n   * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._closeFallbackTimeout;\n  /**\n   * Current state of the dialog.\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._state;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogRef.prototype._overlayRef;\n  /** @type {?} */\n\n  MatDialogRef.prototype._containerInstance;\n  /** @type {?} */\n\n  MatDialogRef.prototype.id;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\n\n\nconst MAT_DIALOG_DATA = /*#__PURE__*/new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\n\nlet MatDialog = /*#__PURE__*/(() => {\n  class MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed =\n      /** @type {?} */\n      defer(\n      /**\n      * @return {?}\n      */\n      () => this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n\n\n    get openDialogs() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n\n\n    get afterOpened() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get _afterAllClosed() {\n      /** @type {?} */\n      const parent = this._parentDialog;\n      return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n\n\n    open(componentOrTemplateRef, config) {\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id)) {\n        throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n      }\n      /** @type {?} */\n\n\n      const overlayRef = this._createOverlay(config);\n      /** @type {?} */\n\n\n      const dialogContainer = this._attachDialogContainer(overlayRef, config);\n      /** @type {?} */\n\n\n      const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._removeOpenDialog(dialogRef));\n      this.afterOpened.next(dialogRef);\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n\n\n    closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n\n\n    getDialogById(id) {\n      return this.openDialogs.find(\n      /**\n      * @param {?} dialog\n      * @return {?}\n      */\n      dialog => dialog.id === id);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n\n\n    _createOverlay(config) {\n      /** @type {?} */\n      const overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n\n\n    _getOverlayConfig(dialogConfig) {\n      /** @type {?} */\n      const state = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n\n\n    _attachDialogContainer(overlay, config) {\n      /** @type {?} */\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      /** @type {?} */\n\n      const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n      /** @type {?} */\n\n      const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n      /** @type {?} */\n\n      const containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n\n      /** @type {?} */\n      const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id); // When the dialog backdrop is clicked, we want to close it.\n\n      if (config.hasBackdrop) {\n        overlayRef.backdropClick().subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          if (!dialogRef.disableClose) {\n            dialogRef.close();\n          }\n        });\n      }\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n        /** @type {?} */\n        null,\n        /** @type {?} */\n        {\n          $implicit: config.data,\n          dialogRef\n        }));\n      } else {\n        /** @type {?} */\n        const injector = this._createInjector(config, dialogRef, dialogContainer);\n        /** @type {?} */\n\n\n        const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n\n\n    _createInjector(config, dialogRef, dialogContainer) {\n      /** @type {?} */\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n      // content are created out of the same ViewContainerRef and as such, are siblings for injector\n      // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n      // added to the injection tokens.\n\n      /** @type {?} */\n\n      const injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n        injectionTokens.set(Directionality, {\n          value: config.direction,\n          change: of()\n        });\n      }\n\n      return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n\n\n    _removeOpenDialog(dialogRef) {\n      /** @type {?} */\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(\n          /**\n          * @param {?} previousValue\n          * @param {?} element\n          * @return {?}\n          */\n          (previousValue, element) => {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._afterAllClosed.next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n\n\n    _hideNonDialogContentFromAssistiveTechnology() {\n      /** @type {?} */\n      const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        /** @type {?} */\n        const siblings = overlayContainer.parentElement.children;\n\n        for (let i = siblings.length - 1; i > -1; i--) {\n          /** @type {?} */\n          let sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n\n\n    _closeDialogs(dialogs) {\n      /** @type {?} */\n      let i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n\n  }\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n  };\n\n  MatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  /** @nocollapse */\n\n  return MatDialog;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatDialog.prototype._openDialogsAtThisLevel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._afterAllClosedAtThisLevel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._afterOpenedAtThisLevel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._ariaHiddenElements;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._scrollStrategy;\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   * @type {?}\n   */\n\n  MatDialog.prototype.afterAllClosed;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._defaultOptions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._parentDialog;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nlet MatDialogClose = /*#__PURE__*/(() => {\n  class MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /**\n       * Default to \"button\" to prevents accidental form submits.\n       */\n\n      this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      /** @type {?} */\n      const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n\n  }\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n          return ctx.dialogRef.close(ctx.dialogResult);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return MatDialogClose;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Screenreader label for the button.\n   * @type {?}\n   */\n  MatDialogClose.prototype.ariaLabel;\n  /**\n   * Default to \"button\" to prevents accidental form submits.\n   * @type {?}\n   */\n\n  MatDialogClose.prototype.type;\n  /**\n   * Dialog close input.\n   * @type {?}\n   */\n\n  MatDialogClose.prototype.dialogResult;\n  /** @type {?} */\n\n  MatDialogClose.prototype._matDialogClose;\n  /** @type {?} */\n\n  MatDialogClose.prototype.dialogRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogClose.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nlet MatDialogTitle = /*#__PURE__*/(() => {\n  class MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (!this._dialogRef) {\n        this._dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const container = this._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = this.id;\n          }\n        });\n      }\n    }\n\n  }\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  /** @nocollapse */\n\n  return MatDialogTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDialogTitle.prototype.id;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogTitle.prototype._dialogRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogTitle.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\n\n\nlet MatDialogContent = /*#__PURE__*/(() => {\n  class MatDialogContent {}\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nlet MatDialogActions = /*#__PURE__*/(() => {\n  class MatDialogActions {}\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  return MatDialogActions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(\n  /**\n  * @param {?} dialog\n  * @return {?}\n  */\n  dialog => dialog.id ===\n  /** @type {?} */\n  parent.id) : null;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatDialogModule = /*#__PURE__*/(() => {\n  class MatDialogModule {}\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n  return MatDialogModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError }; //# sourceMappingURL=dialog.js.map","map":null,"metadata":{},"sourceType":"module"}