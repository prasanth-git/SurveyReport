{"ast":null,"code":"import { Version, InjectionToken, isDevMode, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, ɵɵdefineInjectable, Directive, ElementRef, NgZone, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, ChangeDetectorRef, Output } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$2 } from '@angular/cdk';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { startWith } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/version.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Current version of Angular Material.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\n\nfunction MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst VERSION = /*#__PURE__*/new Version('9.0.1');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/animation/animation.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n */\n\nlet AnimationCurves = /*#__PURE__*/(() => {\n  class AnimationCurves {}\n\n  AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n  return AnimationCurves;\n})();\n\nif (false) {\n  /** @type {?} */\n  AnimationCurves.STANDARD_CURVE;\n  /** @type {?} */\n\n  AnimationCurves.DECELERATION_CURVE;\n  /** @type {?} */\n\n  AnimationCurves.ACCELERATION_CURVE;\n  /** @type {?} */\n\n  AnimationCurves.SHARP_CURVE;\n}\n/**\n * \\@docs-private\n */\n\n\nlet AnimationDurations = /*#__PURE__*/(() => {\n  class AnimationDurations {}\n\n  AnimationDurations.COMPLEX = '375ms';\n  AnimationDurations.ENTERING = '225ms';\n  AnimationDurations.EXITING = '195ms';\n  return AnimationDurations;\n})();\n\nif (false) {\n  /** @type {?} */\n  AnimationDurations.COMPLEX;\n  /** @type {?} */\n\n  AnimationDurations.ENTERING;\n  /** @type {?} */\n\n  AnimationDurations.EXITING;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/common-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\n\n/** @type {?} */\n\n\nconst VERSION$1 = /*#__PURE__*/new Version('9.0.1');\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n  return true;\n}\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n * @type {?}\n */\n\n\nconst MATERIAL_SANITY_CHECKS = /*#__PURE__*/new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY\n});\n/**\n * Object that can be used to configure the sanity checks granularly.\n * @record\n */\n\nfunction GranularSanityChecks() {}\n\nif (false) {\n  /** @type {?} */\n  GranularSanityChecks.prototype.doctype;\n  /** @type {?} */\n\n  GranularSanityChecks.prototype.theme;\n  /** @type {?} */\n\n  GranularSanityChecks.prototype.version;\n  /**\n   * @deprecated No longer being used.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   */\n\n  GranularSanityChecks.prototype.hammer;\n}\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n\n\nlet MatCommonModule = /*#__PURE__*/(() => {\n  class MatCommonModule {\n    /**\n     * @param {?} highContrastModeDetector\n     * @param {?} sanityChecks\n     */\n    constructor(highContrastModeDetector, sanityChecks) {\n      /**\n       * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n       */\n      this._hasDoneGlobalChecks = false;\n      /**\n       * Reference to the global `document` object.\n       */\n\n      this._document = typeof document === 'object' && document ? document : null;\n      /**\n       * Reference to the global 'window' object.\n       */\n\n      this._window = typeof window === 'object' && window ? window : null; // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n      // in MatCommonModule.\n\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses(); // Note that `_sanityChecks` is typed to `any`, because AoT\n      // throws an error if we use the `SanityChecks` type directly.\n\n\n      this._sanityChecks = sanityChecks;\n\n      if (!this._hasDoneGlobalChecks) {\n        this._checkDoctypeIsDefined();\n\n        this._checkThemeIsPresent();\n\n        this._checkCdkVersionMatch();\n\n        this._hasDoneGlobalChecks = true;\n      }\n    }\n    /**\n     * Whether any sanity checks are enabled.\n     * @private\n     * @return {?}\n     */\n\n\n    _checksAreEnabled() {\n      return isDevMode() && !this._isTestEnv();\n    }\n    /**\n     * Whether the code is running in tests.\n     * @private\n     * @return {?}\n     */\n\n\n    _isTestEnv() {\n      /** @type {?} */\n      const window =\n      /** @type {?} */\n      this._window;\n      return window && (window.__karma__ || window.jasmine);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _checkDoctypeIsDefined() {\n      /** @type {?} */\n      const isEnabled = this._checksAreEnabled() && (this._sanityChecks === true ||\n      /** @type {?} */\n      this._sanityChecks.doctype);\n\n      if (isEnabled && this._document && !this._document.doctype) {\n        console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _checkThemeIsPresent() {\n      // We need to assert that the `body` is defined, because these checks run very early\n      // and the `body` won't be defined if the consumer put their scripts in the `head`.\n\n      /** @type {?} */\n      const isDisabled = !this._checksAreEnabled() || this._sanityChecks === false || !\n      /** @type {?} */\n      this._sanityChecks.theme;\n\n      if (isDisabled || !this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n        return;\n      }\n      /** @type {?} */\n\n\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n\n      this._document.body.appendChild(testElement);\n      /** @type {?} */\n\n\n      const computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n    /**\n     * Checks whether the material version matches the cdk version\n     * @private\n     * @return {?}\n     */\n\n\n    _checkCdkVersionMatch() {\n      /** @type {?} */\n      const isEnabled = this._checksAreEnabled() && (this._sanityChecks === true ||\n      /** @type {?} */\n      this._sanityChecks.version);\n\n      if (isEnabled && VERSION$1.full !== VERSION$2.full) {\n        console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' + 'the Angular CDK version (' + VERSION$2.full + ').\\n' + 'Please ensure the versions of these two packages exactly match.');\n      }\n    }\n\n  }\n\n  MatCommonModule.ɵfac = function MatCommonModule_Factory(t) {\n    return new (t || MatCommonModule)(ɵngcc0.ɵɵinject(ɵngcc1.HighContrastModeDetector), ɵngcc0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8));\n  };\n\n  MatCommonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatCommonModule\n  });\n  MatCommonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule], BidiModule]\n  });\n  /** @nocollapse */\n\n  return MatCommonModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCommonModule, {\n    imports: function () {\n      return [BidiModule];\n    },\n    exports: function () {\n      return [BidiModule];\n    }\n  });\n})();\n\nif (false) {\n  /**\n   * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n   * @type {?}\n   * @private\n   */\n  MatCommonModule.prototype._hasDoneGlobalChecks;\n  /**\n   * Reference to the global `document` object.\n   * @type {?}\n   * @private\n   */\n\n  MatCommonModule.prototype._document;\n  /**\n   * Reference to the global 'window' object.\n   * @type {?}\n   * @private\n   */\n\n  MatCommonModule.prototype._window;\n  /**\n   * Configured sanity checks.\n   * @type {?}\n   * @private\n   */\n\n  MatCommonModule.prototype._sanityChecks;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/disabled.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction CanDisable() {}\n\nif (false) {\n  /**\n   * Whether the component is disabled.\n   * @type {?}\n   */\n  CanDisable.prototype.disabled;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinDisabled(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      this._disabled = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/color.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction CanColor() {}\n\nif (false) {\n  /**\n   * Theme color palette for the component.\n   * @type {?}\n   */\n  CanColor.prototype.color;\n}\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction HasElementRef() {}\n\nif (false) {\n  /** @type {?} */\n  HasElementRef.prototype._elementRef;\n}\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\n\n\nfunction mixinColor(base, defaultColor) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args); // Set the default color that can be specified from the mixin.\n\n      this.color = defaultColor;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get color() {\n      return this._color;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set color(value) {\n      /** @type {?} */\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/disable-ripple.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction CanDisableRipple() {}\n\nif (false) {\n  /**\n   * Whether ripples are disabled.\n   * @type {?}\n   */\n  CanDisableRipple.prototype.disableRipple;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinDisableRipple(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      this._disableRipple = false;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n\n\n    get disableRipple() {\n      return this._disableRipple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disableRipple(value) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/tabindex.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction HasTabIndex() {}\n\nif (false) {\n  /**\n   * Tabindex of the component.\n   * @type {?}\n   */\n  HasTabIndex.prototype.tabIndex;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\n\n\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      this._tabIndex = defaultTabIndex;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get tabIndex() {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set tabIndex(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/error-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction CanUpdateErrorState() {}\n\nif (false) {\n  /** @type {?} */\n  CanUpdateErrorState.prototype.stateChanges;\n  /** @type {?} */\n\n  CanUpdateErrorState.prototype.errorState;\n  /** @type {?} */\n\n  CanUpdateErrorState.prototype.errorStateMatcher;\n  /**\n   * @return {?}\n   */\n\n  CanUpdateErrorState.prototype.updateErrorState = function () {};\n}\n/**\n * \\@docs-private\n * @record\n */\n\n\nfunction HasErrorState() {}\n\nif (false) {\n  /** @type {?} */\n  HasErrorState.prototype._parentFormGroup;\n  /** @type {?} */\n\n  HasErrorState.prototype._parentForm;\n  /** @type {?} */\n\n  HasErrorState.prototype._defaultErrorStateMatcher;\n  /** @type {?} */\n\n  HasErrorState.prototype.ngControl;\n}\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinErrorState(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      /**\n       * Whether the component is in an error state.\n       */\n\n      this.errorState = false;\n      /**\n       * Stream that emits whenever the state of the input changes such that the wrapping\n       * `MatFormField` needs to run change detection.\n       */\n\n      this.stateChanges = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    updateErrorState() {\n      /** @type {?} */\n      const oldState = this.errorState;\n      /** @type {?} */\n\n      const parent = this._parentFormGroup || this._parentForm;\n      /** @type {?} */\n\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      /** @type {?} */\n\n      const control = this.ngControl ?\n      /** @type {?} */\n      this.ngControl.control : null;\n      /** @type {?} */\n\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/initialized.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * \\@docs-private\n * @record\n */\n\n\nfunction HasInitialized() {}\n\nif (false) {\n  /**\n   * Stream that emits once during the directive/component's ngOnInit.\n   * @type {?}\n   */\n  HasInitialized.prototype.initialized;\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  HasInitialized.prototype._markInitialized;\n}\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinInitialized(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      /**\n       * Whether this directive has been marked as initialized.\n       */\n\n      this._isInitialized = false;\n      /**\n       * List of subscribers that subscribed before the directive was initialized. Should be notified\n       * during _markInitialized. Set to null after pending subscribers are notified, and should\n       * not expect to be populated after.\n       */\n\n      this._pendingSubscribers = [];\n      /**\n       * Observable stream that emits when the directive initializes. If already initialized, the\n       * subscriber is stored to be notified once _markInitialized is called.\n       */\n\n      this.initialized = new Observable(\n      /**\n      * @param {?} subscriber\n      * @return {?}\n      */\n      subscriber => {\n        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n        // when _markInitialized is called.\n        if (this._isInitialized) {\n          this._notifySubscriber(subscriber);\n        } else {\n          /** @type {?} */\n          this._pendingSubscribers.push(subscriber);\n        }\n      });\n    }\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    _markInitialized() {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      /** @type {?} */\n      this._pendingSubscribers.forEach(this._notifySubscriber);\n\n      this._pendingSubscribers = null;\n    }\n    /**\n     * Emits and completes the subscriber stream (should only emit once).\n     * @param {?} subscriber\n     * @return {?}\n     */\n\n\n    _notifySubscriber(subscriber) {\n      subscriber.next();\n      subscriber.complete();\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/common-behaviors/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/datetime/date-adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n * @type {?}\n */\n\n\nconst MAT_DATE_LOCALE = /*#__PURE__*/new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst MAT_DATE_LOCALE_PROVIDER = {\n  provide: MAT_DATE_LOCALE,\n  useExisting: LOCALE_ID\n};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n * @template D\n */\n\nclass DateAdapter {\n  constructor() {\n    this._localeChanges = new Subject();\n  }\n  /**\n   * A stream that emits when the locale changes.\n   * @return {?}\n   */\n\n\n  get localeChanges() {\n    return this._localeChanges;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `\\@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param {?} value The value to be deserialized into a date object.\n   * @return {?} The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n\n\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param {?} locale The new locale.\n   * @return {?}\n   */\n\n\n  setLocale(locale) {\n    this.locale = locale;\n\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param {?} first The first date to compare.\n   * @param {?} second The second date to compare.\n   * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n\n\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param {?} first The first date to check.\n   * @param {?} second The second date to check.\n   * @return {?} Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n\n\n  sameDate(first, second) {\n    if (first && second) {\n      /** @type {?} */\n      let firstValid = this.isValid(first);\n      /** @type {?} */\n\n      let secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n\n      return firstValid == secondValid;\n    }\n\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param {?} date The date to clamp.\n   * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n   * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n   * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n\n\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n\n    return date;\n  }\n\n}\n\nif (false) {\n  /**\n   * The locale to use for all dates.\n   * @type {?}\n   * @protected\n   */\n  DateAdapter.prototype.locale;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  DateAdapter.prototype._localeChanges;\n  /**\n   * Gets the year component of the given date.\n   * @abstract\n   * @param {?} date The date to extract the year from.\n   * @return {?} The year component.\n   */\n\n  DateAdapter.prototype.getYear = function (date) {};\n  /**\n   * Gets the month component of the given date.\n   * @abstract\n   * @param {?} date The date to extract the month from.\n   * @return {?} The month component (0-indexed, 0 = January).\n   */\n\n\n  DateAdapter.prototype.getMonth = function (date) {};\n  /**\n   * Gets the date of the month component of the given date.\n   * @abstract\n   * @param {?} date The date to extract the date of the month from.\n   * @return {?} The month component (1-indexed, 1 = first of month).\n   */\n\n\n  DateAdapter.prototype.getDate = function (date) {};\n  /**\n   * Gets the day of the week component of the given date.\n   * @abstract\n   * @param {?} date The date to extract the day of the week from.\n   * @return {?} The month component (0-indexed, 0 = Sunday).\n   */\n\n\n  DateAdapter.prototype.getDayOfWeek = function (date) {};\n  /**\n   * Gets a list of names for the months.\n   * @abstract\n   * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @return {?} An ordered list of all month names, starting with January.\n   */\n\n\n  DateAdapter.prototype.getMonthNames = function (style) {};\n  /**\n   * Gets a list of names for the dates of the month.\n   * @abstract\n   * @return {?} An ordered list of all date of the month names, starting with '1'.\n   */\n\n\n  DateAdapter.prototype.getDateNames = function () {};\n  /**\n   * Gets a list of names for the days of the week.\n   * @abstract\n   * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @return {?} An ordered list of all weekday names, starting with Sunday.\n   */\n\n\n  DateAdapter.prototype.getDayOfWeekNames = function (style) {};\n  /**\n   * Gets the name for the year of the given date.\n   * @abstract\n   * @param {?} date The date to get the year name for.\n   * @return {?} The name of the given year (e.g. '2017').\n   */\n\n\n  DateAdapter.prototype.getYearName = function (date) {};\n  /**\n   * Gets the first day of the week.\n   * @abstract\n   * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n   */\n\n\n  DateAdapter.prototype.getFirstDayOfWeek = function () {};\n  /**\n   * Gets the number of days in the month of the given date.\n   * @abstract\n   * @param {?} date The date whose month should be checked.\n   * @return {?} The number of days in the month of the given date.\n   */\n\n\n  DateAdapter.prototype.getNumDaysInMonth = function (date) {};\n  /**\n   * Clones the given date.\n   * @abstract\n   * @param {?} date The date to clone\n   * @return {?} A new date equal to the given date.\n   */\n\n\n  DateAdapter.prototype.clone = function (date) {};\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @abstract\n   * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @return {?} The new date, or null if invalid.\n   */\n\n\n  DateAdapter.prototype.createDate = function (year, month, date) {};\n  /**\n   * Gets today's date.\n   * @abstract\n   * @return {?} Today's date.\n   */\n\n\n  DateAdapter.prototype.today = function () {};\n  /**\n   * Parses a date from a user-provided value.\n   * @abstract\n   * @param {?} value The value to parse.\n   * @param {?} parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @return {?} The parsed date.\n   */\n\n\n  DateAdapter.prototype.parse = function (value, parseFormat) {};\n  /**\n   * Formats a date as a string according to the given format.\n   * @abstract\n   * @param {?} date The value to format.\n   * @param {?} displayFormat The format to use to display the date as a string.\n   * @return {?} The formatted date string.\n   */\n\n\n  DateAdapter.prototype.format = function (date, displayFormat) {};\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @abstract\n   * @param {?} date The date to add years to.\n   * @param {?} years The number of years to add (may be negative).\n   * @return {?} A new date equal to the given one with the specified number of years added.\n   */\n\n\n  DateAdapter.prototype.addCalendarYears = function (date, years) {};\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @abstract\n   * @param {?} date The date to add months to.\n   * @param {?} months The number of months to add (may be negative).\n   * @return {?} A new date equal to the given one with the specified number of months added.\n   */\n\n\n  DateAdapter.prototype.addCalendarMonths = function (date, months) {};\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @abstract\n   * @param {?} date The date to add days to.\n   * @param {?} days The number of days to add (may be negative).\n   * @return {?} A new date equal to the given one with the specified number of days added.\n   */\n\n\n  DateAdapter.prototype.addCalendarDays = function (date, days) {};\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @abstract\n   * @param {?} date The date to get the ISO date string for.\n   * @return {?} The ISO date string date string.\n   */\n\n\n  DateAdapter.prototype.toIso8601 = function (date) {};\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @abstract\n   * @param {?} obj The object to check\n   * @return {?} Whether the object is a date instance.\n   */\n\n\n  DateAdapter.prototype.isDateInstance = function (obj) {};\n  /**\n   * Checks whether the given date is valid.\n   * @abstract\n   * @param {?} date The date to check.\n   * @return {?} Whether the date is valid.\n   */\n\n\n  DateAdapter.prototype.isValid = function (date) {};\n  /**\n   * Gets date instance that is not valid.\n   * @abstract\n   * @return {?} An invalid date.\n   */\n\n\n  DateAdapter.prototype.invalid = function () {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/datetime/date-formats.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst MAT_DATE_FORMATS = /*#__PURE__*/new InjectionToken('mat-date-formats');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/datetime/native-date-adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n\n/**\n * Whether the browser supports the Intl API.\n * @type {?}\n */\n\nlet SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch (_a) {\n  SUPPORTS_INTL_API = false;\n}\n/**\n * The default month names to use if Intl API is not available.\n * @type {?}\n */\n\n\nconst DEFAULT_MONTH_NAMES = {\n  'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\nconst ɵ0 =\n/**\n* @param {?} i\n* @return {?}\n*/\ni => String(i + 1);\n/**\n * The default date names to use if Intl API is not available.\n * @type {?}\n */\n\n\nconst DEFAULT_DATE_NAMES = /*#__PURE__*/range(31, ɵ0);\n/**\n * The default day of the week names to use if Intl API is not available.\n * @type {?}\n */\n\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n * @type {?}\n */\n\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\n\nfunction range(length, valueFunction) {\n  /** @type {?} */\n  const valuesArray = Array(length);\n\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\n\n\nlet NativeDateAdapter = /*#__PURE__*/(() => {\n  class NativeDateAdapter extends DateAdapter {\n    /**\n     * @param {?} matDateLocale\n     * @param {?} platform\n     */\n    constructor(matDateLocale, platform) {\n      super();\n      /**\n       * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n       * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n       * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n       * will produce `'8/13/1800'`.\n       *\n       * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n       * getting the string representation of a Date object from its utc representation. We're keeping\n       * it here for sometime, just for precaution, in case we decide to revert some of these changes\n       * though.\n       */\n\n      this.useUtcForDisplay = true;\n      super.setLocale(matDateLocale); // IE does its own time zone correction, so we disable this on IE.\n\n      this.useUtcForDisplay = !platform.TRIDENT;\n      this._clampDate = platform.TRIDENT || platform.EDGE;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getYear(date) {\n      return date.getFullYear();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getMonth(date) {\n      return date.getMonth();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getDate(date) {\n      return date.getDate();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getDayOfWeek(date) {\n      return date.getDay();\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n\n\n    getMonthNames(style) {\n      if (SUPPORTS_INTL_API) {\n        /** @type {?} */\n        const dtf = new Intl.DateTimeFormat(this.locale, {\n          month: style,\n          timeZone: 'utc'\n        });\n        return range(12,\n        /**\n        * @param {?} i\n        * @return {?}\n        */\n        i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n      }\n\n      return DEFAULT_MONTH_NAMES[style];\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDateNames() {\n      if (SUPPORTS_INTL_API) {\n        /** @type {?} */\n        const dtf = new Intl.DateTimeFormat(this.locale, {\n          day: 'numeric',\n          timeZone: 'utc'\n        });\n        return range(31,\n        /**\n        * @param {?} i\n        * @return {?}\n        */\n        i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n      }\n\n      return DEFAULT_DATE_NAMES;\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n\n\n    getDayOfWeekNames(style) {\n      if (SUPPORTS_INTL_API) {\n        /** @type {?} */\n        const dtf = new Intl.DateTimeFormat(this.locale, {\n          weekday: style,\n          timeZone: 'utc'\n        });\n        return range(7,\n        /**\n        * @param {?} i\n        * @return {?}\n        */\n        i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n      }\n\n      return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getYearName(date) {\n      if (SUPPORTS_INTL_API) {\n        /** @type {?} */\n        const dtf = new Intl.DateTimeFormat(this.locale, {\n          year: 'numeric',\n          timeZone: 'utc'\n        });\n        return this._stripDirectionalityCharacters(this._format(dtf, date));\n      }\n\n      return String(this.getYear(date));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getFirstDayOfWeek() {\n      // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n      return 0;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    getNumDaysInMonth(date) {\n      return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    clone(date) {\n      return new Date(date.getTime());\n    }\n    /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    createDate(year, month, date) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n      /** @type {?} */\n\n\n      let result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n\n\n      if (result.getMonth() != month) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n\n      return result;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    today() {\n      return new Date();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    parse(value) {\n      // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n      // parameters.\n      if (typeof value == 'number') {\n        return new Date(value);\n      }\n\n      return value ? new Date(Date.parse(value)) : null;\n    }\n    /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n\n\n    format(date, displayFormat) {\n      if (!this.isValid(date)) {\n        throw Error('NativeDateAdapter: Cannot format invalid date.');\n      }\n\n      if (SUPPORTS_INTL_API) {\n        // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n        // if we attempt to format a date whose year is less than 1 or greater than 9999.\n        if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n          date = this.clone(date);\n          date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n        }\n\n        displayFormat = Object.assign(Object.assign({}, displayFormat), {\n          timeZone: 'utc'\n        });\n        /** @type {?} */\n\n        const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n        return this._stripDirectionalityCharacters(this._format(dtf, date));\n      }\n\n      return this._stripDirectionalityCharacters(date.toDateString());\n    }\n    /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n\n\n    addCalendarYears(date, years) {\n      return this.addCalendarMonths(date, years * 12);\n    }\n    /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n\n\n    addCalendarMonths(date, months) {\n      /** @type {?} */\n      let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new\n      // month. In this case we want to go to the last day of the desired month.\n      // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n      // guarantee this.\n\n\n      if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n      }\n\n      return newDate;\n    }\n    /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n\n\n    addCalendarDays(date, days) {\n      return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    toIso8601(date) {\n      return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    deserialize(value) {\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n        // string is the right format first.\n\n\n        if (ISO_8601_REGEX.test(value)) {\n          /** @type {?} */\n          let date = new Date(value);\n\n          if (this.isValid(date)) {\n            return date;\n          }\n        }\n      }\n\n      return super.deserialize(value);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n\n\n    isDateInstance(obj) {\n      return obj instanceof Date;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    isValid(date) {\n      return !isNaN(date.getTime());\n    }\n    /**\n     * @return {?}\n     */\n\n\n    invalid() {\n      return new Date(NaN);\n    }\n    /**\n     * Creates a date but allows the month and date to overflow.\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n\n\n    _createDateWithOverflow(year, month, date) {\n      /** @type {?} */\n      const result = new Date(year, month, date); // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n      // abbreviations for 19xx.\n\n      if (year >= 0 && year < 100) {\n        result.setFullYear(this.getYear(result) - 1900);\n      }\n\n      return result;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @private\n     * @param {?} n The number to pad.\n     * @return {?} The padded number.\n     */\n\n\n    _2digit(n) {\n      return ('00' + n).slice(-2);\n    }\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @private\n     * @param {?} str The string to strip direction characters from.\n     * @return {?} The stripped string.\n     */\n\n\n    _stripDirectionalityCharacters(str) {\n      return str.replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @private\n     * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param {?} date Date from which we want to get the string representation according to dtf\n     * @return {?} A Date object with its UTC representation based on the passed in date info\n     */\n\n\n    _format(dtf, date) {\n      /** @type {?} */\n      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return dtf.format(d);\n    }\n\n  }\n\n  NativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {\n    return new (t || NativeDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n  };\n\n  NativeDateAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NativeDateAdapter,\n    factory: NativeDateAdapter.ɵfac\n  });\n  /** @nocollapse */\n\n  return NativeDateAdapter;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors.\n   * @type {?}\n   * @private\n   */\n  NativeDateAdapter.prototype._clampDate;\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   * @type {?}\n   */\n\n  NativeDateAdapter.prototype.useUtcForDisplay;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/datetime/native-date-formats.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @type {?} */\n\n\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/datetime/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet NativeDateModule = /*#__PURE__*/(() => {\n  class NativeDateModule {}\n\n  NativeDateModule.ɵfac = function NativeDateModule_Factory(t) {\n    return new (t || NativeDateModule)();\n  };\n\n  NativeDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NativeDateModule\n  });\n  NativeDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DateAdapter,\n      useClass: NativeDateAdapter\n    }],\n    imports: [[PlatformModule]]\n  });\n  return NativeDateModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeDateModule, {\n    imports: function () {\n      return [PlatformModule];\n    }\n  });\n})();\n\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\nlet MatNativeDateModule = /*#__PURE__*/(() => {\n  class MatNativeDateModule {}\n\n  MatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {\n    return new (t || MatNativeDateModule)();\n  };\n\n  MatNativeDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatNativeDateModule\n  });\n  MatNativeDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: MAT_DATE_FORMATS,\n      useValue: ɵ0$1\n    }],\n    imports: [[NativeDateModule]]\n  });\n  return MatNativeDateModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatNativeDateModule, {\n    imports: [NativeDateModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/error/error-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Error state matcher that matches when a control is invalid and dirty.\n */\n\n\nlet ShowOnDirtyErrorStateMatcher = /*#__PURE__*/(() => {\n  class ShowOnDirtyErrorStateMatcher {\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.dirty || form && form.submitted));\n    }\n\n  }\n\n  ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {\n    return new (t || ShowOnDirtyErrorStateMatcher)();\n  };\n\n  ShowOnDirtyErrorStateMatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ShowOnDirtyErrorStateMatcher,\n    factory: ShowOnDirtyErrorStateMatcher.ɵfac\n  });\n  return ShowOnDirtyErrorStateMatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provider that defines how form controls behave with regards to displaying error messages.\n */\n\n\nlet ErrorStateMatcher = /*#__PURE__*/(() => {\n  class ErrorStateMatcher {\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.touched || form && form.submitted));\n    }\n\n  }\n\n  ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {\n    return new (t || ErrorStateMatcher)();\n  };\n  /** @nocollapse */\n\n\n  ErrorStateMatcher.ɵprov = ɵɵdefineInjectable({\n    factory: function ErrorStateMatcher_Factory() {\n      return new ErrorStateMatcher();\n    },\n    token: ErrorStateMatcher,\n    providedIn: \"root\"\n  });\n  return ErrorStateMatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/gestures/gesture-annotations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\n */\n\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction HammerInput() {}\n\nif (false) {\n  /** @type {?} */\n  HammerInput.prototype.preventDefault;\n  /** @type {?} */\n\n  HammerInput.prototype.deltaX;\n  /** @type {?} */\n\n  HammerInput.prototype.deltaY;\n  /** @type {?} */\n\n  HammerInput.prototype.center;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction HammerStatic() {}\n\nif (false) {\n  /** @type {?} */\n  HammerStatic.prototype.Pan;\n  /** @type {?} */\n\n  HammerStatic.prototype.Swipe;\n  /** @type {?} */\n\n  HammerStatic.prototype.Press;\n  /* Skipping unhandled member: new(element: HTMLElement | SVGElement, options?: any): HammerManager;*/\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction Recognizer() {}\n\nif (false) {\n  /* Skipping unhandled member: new(options?: any): Recognizer;*/\n\n  /**\n   * @param {?} otherRecognizer\n   * @return {?}\n   */\n  Recognizer.prototype.recognizeWith = function (otherRecognizer) {};\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction RecognizerStatic() {}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction HammerInstance() {}\n\nif (false) {\n  /**\n   * @param {?} eventName\n   * @param {?} callback\n   * @return {?}\n   */\n  HammerInstance.prototype.on = function (eventName, callback) {};\n  /**\n   * @param {?} eventName\n   * @param {?} callback\n   * @return {?}\n   */\n\n\n  HammerInstance.prototype.off = function (eventName, callback) {};\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction HammerManager() {}\n\nif (false) {\n  /**\n   * @param {?} recogniser\n   * @return {?}\n   */\n  HammerManager.prototype.add = function (recogniser) {};\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  HammerManager.prototype.set = function (options) {};\n  /**\n   * @param {?} event\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  HammerManager.prototype.emit = function (event, data) {};\n  /**\n   * @param {?} events\n   * @param {?=} handler\n   * @return {?}\n   */\n\n\n  HammerManager.prototype.off = function (events, handler) {};\n  /**\n   * @param {?} events\n   * @param {?} handler\n   * @return {?}\n   */\n\n\n  HammerManager.prototype.on = function (events, handler) {};\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @record\n */\n\n\nfunction HammerOptions() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  HammerOptions.prototype.cssProps;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.domEvents;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.enable;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.preset;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.touchAction;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.recognizers;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.inputClass;\n  /** @type {?|undefined} */\n\n  HammerOptions.prototype.inputTarget;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/gestures/gesture-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * @type {?}\n */\n\n\nconst MAT_HAMMER_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_HAMMER_OPTIONS');\n/** @type {?} */\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = ['longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'];\n\nconst ɵ0$2 =\n/**\n* @return {?}\n*/\n() => {},\n      ɵ1 =\n/**\n* @return {?}\n*/\n() => {};\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n * @type {?}\n */\n\n\nconst noopHammerInstance = {\n  on: ɵ0$2,\n  off: ɵ1\n};\n/**\n * Adjusts configuration of our gesture library, Hammer.\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n */\n\nlet GestureConfig = /*#__PURE__*/(() => {\n  class GestureConfig extends HammerGestureConfig {\n    /**\n     * @param {?=} _hammerOptions\n     * @param {?=} _commonModule\n     */\n    constructor(_hammerOptions, _commonModule) {\n      super();\n      this._hammerOptions = _hammerOptions;\n      /**\n       * List of new event names to add to the gesture support list\n       */\n\n      this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n\n\n    buildHammer(element) {\n      /** @type {?} */\n      const hammer = typeof window !== 'undefined' ?\n      /** @type {?} */\n      window.Hammer : null;\n\n      if (!hammer) {\n        // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n        // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n        // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n        // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n        // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n        // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n        // undefined).\n        // @breaking-change 8.0.0\n        return noopHammerInstance;\n      }\n      /** @type {?} */\n\n\n      const mc = new hammer(element, this._hammerOptions || undefined); // Default Hammer Recognizers.\n\n      /** @type {?} */\n\n      const pan = new hammer.Pan();\n      /** @type {?} */\n\n      const swipe = new hammer.Swipe();\n      /** @type {?} */\n\n      const press = new hammer.Press(); // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n      // Otherwise the previous `recognizeWith` will be dropped.\n      // TODO: Confirm threshold numbers with Material Design UX Team\n\n      /** @type {?} */\n\n      const slide = this._createRecognizer(pan, {\n        event: 'slide',\n        threshold: 0\n      }, swipe);\n      /** @type {?} */\n\n\n      const longpress = this._createRecognizer(press, {\n        event: 'longpress',\n        time: 500\n      }); // Overwrite the default `pan` event to use the swipe event.\n\n\n      pan.recognizeWith(swipe); // Since the slide event threshold is set to zero, the slide recognizer can fire and\n      // accidentally reset the longpress recognizer. In order to make sure that the two\n      // recognizers can run simultaneously but don't affect each other, we allow the slide\n      // recognizer to recognize while a longpress is being processed.\n      // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n\n      longpress.recognizeWith(slide); // Add customized gestures to Hammer manager\n\n      mc.add([swipe, press, pan, slide, longpress]);\n      return (\n        /** @type {?} */\n        mc\n      );\n    }\n    /**\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\n     * @private\n     * @param {?} base\n     * @param {?} options\n     * @param {...?} inheritances\n     * @return {?}\n     */\n\n\n    _createRecognizer(base, options, ...inheritances) {\n      /** @type {?} */\n      let recognizer = new\n      /** @type {?} */\n      base.constructor(options);\n      inheritances.push(base);\n      inheritances.forEach(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => recognizer.recognizeWith(item));\n      return recognizer;\n    }\n\n  }\n\n  GestureConfig.ɵfac = function GestureConfig_Factory(t) {\n    return new (t || GestureConfig)(ɵngcc0.ɵɵinject(MAT_HAMMER_OPTIONS, 8), ɵngcc0.ɵɵinject(MatCommonModule, 8));\n  };\n\n  GestureConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: GestureConfig,\n    factory: GestureConfig.ɵfac\n  });\n  /** @nocollapse */\n\n  return GestureConfig;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * List of new event names to add to the gesture support list\n   * @type {?}\n   */\n  GestureConfig.prototype.events;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  GestureConfig.prototype._hammerOptions;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/line/line.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n\n\nlet MatLine = /*#__PURE__*/(() => {\n  class MatLine {}\n\n  MatLine.ɵfac = function MatLine_Factory(t) {\n    return new (t || MatLine)();\n  };\n\n  MatLine.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatLine,\n    selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n    hostAttrs: [1, \"mat-line\"]\n  });\n  return MatLine;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @param {?} lines\n * @param {?} element\n * @return {?}\n */\n\n\nfunction setLines(lines, element) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(\n  /**\n  * @param {?} __0\n  * @return {?}\n  */\n  ({\n    length\n  }) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n/**\n * Adds or removes a class from an element.\n * @param {?} element\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\n\n\nfunction setClass(element, className, isAdd) {\n  /** @type {?} */\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @deprecated Use `setLines` instead.\n * \\@breaking-change 8.0.0\n */\n\n\nclass MatLineSetter {\n  /**\n   * @param {?} lines\n   * @param {?} element\n   */\n  constructor(lines, element) {\n    setLines(lines, element);\n  }\n\n}\n\nlet MatLineModule = /*#__PURE__*/(() => {\n  class MatLineModule {}\n\n  MatLineModule.ɵfac = function MatLineModule_Factory(t) {\n    return new (t || MatLineModule)();\n  };\n\n  MatLineModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatLineModule\n  });\n  MatLineModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatLineModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatLineModule, {\n    declarations: [MatLine],\n    imports: [MatCommonModule],\n    exports: [MatLine, MatCommonModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/ripple/ripple-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nconst RippleState = {\n  FADING_IN: 0,\n  VISIBLE: 1,\n  FADING_OUT: 2,\n  HIDDEN: 3\n};\nRippleState[RippleState.FADING_IN] = 'FADING_IN';\nRippleState[RippleState.VISIBLE] = 'VISIBLE';\nRippleState[RippleState.FADING_OUT] = 'FADING_OUT';\nRippleState[RippleState.HIDDEN] = 'HIDDEN';\n/**\n * Reference to a previously launched ripple element.\n */\n\nclass RippleRef {\n  /**\n   * @param {?} _renderer\n   * @param {?} element\n   * @param {?} config\n   */\n  constructor(_renderer, element, config) {\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    /**\n     * Current state of the ripple.\n     */\n\n    this.state = RippleState.HIDDEN;\n  }\n  /**\n   * Fades out the ripple element.\n   * @return {?}\n   */\n\n\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n\n}\n\nif (false) {\n  /**\n   * Current state of the ripple.\n   * @type {?}\n   */\n  RippleRef.prototype.state;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RippleRef.prototype._renderer;\n  /**\n   * Reference to the ripple HTML element.\n   * @type {?}\n   */\n\n  RippleRef.prototype.element;\n  /**\n   * Ripple configuration used for the ripple.\n   * @type {?}\n   */\n\n  RippleRef.prototype.config;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/ripple/ripple-renderer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n * @record\n */\n\n\nfunction RippleAnimationConfig() {}\n\nif (false) {\n  /**\n   * Duration in milliseconds for the enter animation (expansion from point of contact).\n   * @type {?|undefined}\n   */\n  RippleAnimationConfig.prototype.enterDuration;\n  /**\n   * Duration in milliseconds for the exit animation (fade-out).\n   * @type {?|undefined}\n   */\n\n  RippleAnimationConfig.prototype.exitDuration;\n}\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * \\@docs-private\n * @record\n */\n\n\nfunction RippleTarget() {}\n\nif (false) {\n  /**\n   * Configuration for ripples that are launched on pointer down.\n   * @type {?}\n   */\n  RippleTarget.prototype.rippleConfig;\n  /**\n   * Whether ripples on pointer down should be disabled.\n   * @type {?}\n   */\n\n  RippleTarget.prototype.rippleDisabled;\n}\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n * @type {?}\n */\n\n\nconst defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n * @type {?}\n */\n\nconst ignoreMouseEventsTimeout = 800;\n/**\n * Options that apply to all the event listeners that are bound by the ripple renderer.\n * @type {?}\n */\n\nconst passiveEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\n\nclass RippleRenderer {\n  /**\n   * @param {?} _target\n   * @param {?} _ngZone\n   * @param {?} elementOrElementRef\n   * @param {?} platform\n   */\n  constructor(_target, _ngZone, elementOrElementRef, platform) {\n    this._target = _target;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the pointer is currently down or not.\n     */\n\n    this._isPointerDown = false;\n    /**\n     * Events to be registered on the trigger element.\n     */\n\n    this._triggerEvents = new Map();\n    /**\n     * Set of currently active ripple references.\n     */\n\n    this._activeRipples = new Set();\n    /**\n     * Function being called whenever the trigger is being pressed using mouse.\n     */\n\n    this._onMousedown =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // Screen readers will fire fake mouse events for space/enter. Skip launching a\n      // ripple in this case for consistency with the non-screen-reader experience.\n\n      /** @type {?} */\n      const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n      /** @type {?} */\n\n      const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n      if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n        this._isPointerDown = true;\n        this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n      }\n    };\n    /**\n     * Function being called whenever the trigger is being pressed using touch.\n     */\n\n\n    this._onTouchStart =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      if (!this._target.rippleDisabled) {\n        // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n        // events will launch a second ripple if we don't ignore mouse events for a specific\n        // time after a touchstart event.\n        this._lastTouchStartEvent = Date.now();\n        this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put\n        // their finger down, but used another finger to tap the element again.\n\n        /** @type {?} */\n\n        const touches = event.changedTouches;\n\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    };\n    /**\n     * Function being called whenever the trigger is being released.\n     */\n\n\n    this._onPointerUp =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (!this._isPointerDown) {\n        return;\n      }\n\n      this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.\n\n      this._activeRipples.forEach(\n      /**\n      * @param {?} ripple\n      * @return {?}\n      */\n      ripple => {\n        // By default, only ripples that are completely visible will fade out on pointer release.\n        // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n\n        /** @type {?} */\n        const isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n        if (!ripple.config.persistent && isVisible) {\n          ripple.fadeOut();\n        }\n      });\n    }; // Only do anything if we're on the browser.\n\n\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef); // Specify events which need to be registered on the trigger.\n\n      this._triggerEvents.set('mousedown', this._onMousedown).set('mouseup', this._onPointerUp).set('mouseleave', this._onPointerUp).set('touchstart', this._onTouchStart).set('touchend', this._onPointerUp).set('touchcancel', this._onPointerUp);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param {?=} config Extra ripple options.\n   * @return {?}\n   */\n\n\n  fadeInRipple(x, y, config = {}) {\n    /** @type {?} */\n    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n    /** @type {?} */\n\n\n    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n    /** @type {?} */\n\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    /** @type {?} */\n\n    const offsetX = x - containerRect.left;\n    /** @type {?} */\n\n    const offsetY = y - containerRect.top;\n    /** @type {?} */\n\n    const duration = animationConfig.enterDuration;\n    /** @type {?} */\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`; // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n\n\n    enforceStyleRecalculation(ripple);\n    ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.\n\n    /** @type {?} */\n\n    const rippleRef = new RippleRef(this, ripple, config);\n    rippleRef.state = RippleState.FADING_IN; // Add the ripple reference to the list of all active ripples.\n\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    } // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n\n\n    this._runTimeoutOutsideZone(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n      rippleRef.state = RippleState.VISIBLE; // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n  /**\n   * Fades out a ripple reference.\n   * @param {?} rippleRef\n   * @return {?}\n   */\n\n\n  fadeOutRipple(rippleRef) {\n    /** @type {?} */\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    } // Clear out the cached bounding rect if we have no more ripples.\n\n\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    } // For ripples that are not active anymore, don't re-run the fade-out animation.\n\n\n    if (!wasActive) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const rippleEl = rippleRef.element;\n    /** @type {?} */\n\n    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT; // Once the ripple faded out, the ripple can be safely removed from the DOM.\n\n    this._runTimeoutOutsideZone(\n    /**\n    * @return {?}\n    */\n    () => {\n      rippleRef.state = RippleState.HIDDEN;\n\n      /** @type {?} */\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n  /**\n   * Fades out all currently active ripples.\n   * @return {?}\n   */\n\n\n  fadeOutAll() {\n    this._activeRipples.forEach(\n    /**\n    * @param {?} ripple\n    * @return {?}\n    */\n    ripple => ripple.fadeOut());\n  }\n  /**\n   * Sets up the trigger event listeners\n   * @param {?} elementOrElementRef\n   * @return {?}\n   */\n\n\n  setupTriggerEvents(elementOrElementRef) {\n    /** @type {?} */\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    } // Remove all previously registered event listeners from the trigger element.\n\n\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._triggerEvents.forEach(\n      /**\n      * @param {?} fn\n      * @param {?} type\n      * @return {?}\n      */\n      (fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n  /**\n   * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n   * @private\n   * @param {?} fn\n   * @param {?=} delay\n   * @return {?}\n   */\n\n\n  _runTimeoutOutsideZone(fn, delay = 0) {\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => setTimeout(fn, delay));\n  }\n  /**\n   * Removes previously registered event listeners from the trigger element.\n   * @return {?}\n   */\n\n\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach(\n      /**\n      * @param {?} fn\n      * @param {?} type\n      * @return {?}\n      */\n      (fn, type) => {\n        /** @type {?} */\n        this._triggerElement.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * Element where the ripples are being added to.\n   * @type {?}\n   * @private\n   */\n  RippleRenderer.prototype._containerElement;\n  /**\n   * Element which triggers the ripple elements on mouse events.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._triggerElement;\n  /**\n   * Whether the pointer is currently down or not.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._isPointerDown;\n  /**\n   * Events to be registered on the trigger element.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._triggerEvents;\n  /**\n   * Set of currently active ripple references.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._activeRipples;\n  /**\n   * Latest non-persistent ripple that was triggered.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._mostRecentTransientRipple;\n  /**\n   * Time in milliseconds when the last touchstart event happened.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._lastTouchStartEvent;\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._containerRect;\n  /**\n   * Function being called whenever the trigger is being pressed using mouse.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._onMousedown;\n  /**\n   * Function being called whenever the trigger is being pressed using touch.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._onTouchStart;\n  /**\n   * Function being called whenever the trigger is being released.\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._onPointerUp;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._target;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RippleRenderer.prototype._ngZone;\n}\n/**\n * Enforces a style recalculation of a DOM element by computing its styles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction enforceStyleRecalculation(element) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\n\n\nfunction distanceToFurthestCorner(x, y, rect) {\n  /** @type {?} */\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  /** @type {?} */\n\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/ripple/ripple.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Configurable options for `matRipple`.\n * @record\n */\n\n\nfunction RippleGlobalOptions() {}\n\nif (false) {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   * @type {?|undefined}\n   */\n  RippleGlobalOptions.prototype.disabled;\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   * @type {?|undefined}\n   */\n\n  RippleGlobalOptions.prototype.animation;\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   * @type {?|undefined}\n   */\n\n  RippleGlobalOptions.prototype.terminateOnPointerUp;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n * @type {?}\n */\n\n\nconst MAT_RIPPLE_GLOBAL_OPTIONS = /*#__PURE__*/new InjectionToken('mat-ripple-global-options');\nlet MatRipple = /*#__PURE__*/(() => {\n  class MatRipple {\n    /**\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?=} globalOptions\n     * @param {?=} animationMode\n     */\n    constructor(_elementRef, ngZone, platform, globalOptions, animationMode) {\n      this._elementRef = _elementRef;\n      /**\n       * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n       * will be the distance from the center of the ripple to the furthest corner of the host element's\n       * bounding rectangle.\n       */\n\n      this.radius = 0;\n      this._disabled = false;\n      /**\n       * Whether ripple directive is initialized and the input bindings are set.\n       */\n\n      this._isInitialized = false;\n      this._globalOptions = globalOptions || {};\n      this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n      if (animationMode === 'NoopAnimations') {\n        this._globalOptions.animation = {\n          enterDuration: 0,\n          exitDuration: 0\n        };\n      }\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = value;\n\n      this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     * @return {?}\n     */\n\n\n    get trigger() {\n      return this._trigger || this._elementRef.nativeElement;\n    }\n    /**\n     * @param {?} trigger\n     * @return {?}\n     */\n\n\n    set trigger(trigger) {\n      this._trigger = trigger;\n\n      this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._isInitialized = true;\n\n      this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._rippleRenderer._removeTriggerEvents();\n    }\n    /**\n     * Fades out all currently showing ripple elements.\n     * @return {?}\n     */\n\n\n    fadeOutAll() {\n      this._rippleRenderer.fadeOutAll();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * \\@docs-private Implemented as part of RippleTarget\n     * @return {?}\n     */\n\n\n    get rippleConfig() {\n      return {\n        centered: this.centered,\n        radius: this.radius,\n        color: this.color,\n        animation: Object.assign(Object.assign({}, this._globalOptions.animation), this.animation),\n        terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n      };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * \\@docs-private Implemented as part of RippleTarget\n     * @return {?}\n     */\n\n\n    get rippleDisabled() {\n      return this.disabled || !!this._globalOptions.disabled;\n    }\n    /**\n     * Sets up the trigger event listeners if ripples are enabled.\n     * @private\n     * @return {?}\n     */\n\n\n    _setupTriggerEventsIfEnabled() {\n      if (!this.disabled && this._isInitialized) {\n        this._rippleRenderer.setupTriggerEvents(this.trigger);\n      }\n    }\n    /**\n     * Launches a manual ripple at the specified coordinated or just by the ripple config.\n     * @param {?} configOrX\n     * @param {?=} y\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    launch(configOrX, y = 0, config) {\n      if (typeof configOrX === 'number') {\n        return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n      } else {\n        return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n      }\n    }\n\n  }\n\n  MatRipple.ɵfac = function MatRipple_Factory(t) {\n    return new (t || MatRipple)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatRipple.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatRipple,\n    selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]],\n    hostAttrs: [1, \"mat-ripple\"],\n    hostVars: 2,\n    hostBindings: function MatRipple_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n      }\n    },\n    inputs: {\n      radius: [\"matRippleRadius\", \"radius\"],\n      disabled: [\"matRippleDisabled\", \"disabled\"],\n      trigger: [\"matRippleTrigger\", \"trigger\"],\n      color: [\"matRippleColor\", \"color\"],\n      unbounded: [\"matRippleUnbounded\", \"unbounded\"],\n      centered: [\"matRippleCentered\", \"centered\"],\n      animation: [\"matRippleAnimation\", \"animation\"]\n    },\n    exportAs: [\"matRipple\"]\n  });\n  /** @nocollapse */\n\n  return MatRipple;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Custom color for all ripples.\n   * @type {?}\n   */\n  MatRipple.prototype.color;\n  /**\n   * Whether the ripples should be visible outside the component's bounds.\n   * @type {?}\n   */\n\n  MatRipple.prototype.unbounded;\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   * @type {?}\n   */\n\n  MatRipple.prototype.centered;\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   * @type {?}\n   */\n\n  MatRipple.prototype.radius;\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   * @type {?}\n   */\n\n  MatRipple.prototype.animation;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._trigger;\n  /**\n   * Renderer for the ripple DOM manipulations.\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._rippleRenderer;\n  /**\n   * Options that are set globally for all ripples.\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._globalOptions;\n  /**\n   * Whether ripple directive is initialized and the input bindings are set.\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._isInitialized;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatRipple.prototype._elementRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/ripple/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatRippleModule = /*#__PURE__*/(() => {\n  class MatRippleModule {}\n\n  MatRippleModule.ɵfac = function MatRippleModule_Factory(t) {\n    return new (t || MatRippleModule)();\n  };\n\n  MatRippleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatRippleModule\n  });\n  MatRippleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule, PlatformModule], MatCommonModule]\n  });\n  return MatRippleModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRippleModule, {\n    declarations: function () {\n      return [MatRipple];\n    },\n    imports: function () {\n      return [MatCommonModule, PlatformModule];\n    },\n    exports: function () {\n      return [MatRipple, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\n\n\nlet MatPseudoCheckbox = /*#__PURE__*/(() => {\n  class MatPseudoCheckbox {\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n      this._animationMode = _animationMode;\n      /**\n       * Display state of the checkbox.\n       */\n\n      this.state = 'unchecked';\n      /**\n       * Whether the checkbox is disabled.\n       */\n\n      this.disabled = false;\n    }\n\n  }\n\n  MatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) {\n    return new (t || MatPseudoCheckbox)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatPseudoCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatPseudoCheckbox,\n    selectors: [[\"mat-pseudo-checkbox\"]],\n    hostAttrs: [1, \"mat-pseudo-checkbox\"],\n    hostVars: 8,\n    hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      state: \"state\",\n      disabled: \"disabled\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MatPseudoCheckbox_Template(rf, ctx) {},\n    styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatPseudoCheckbox;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Display state of the checkbox.\n   * @type {?}\n   */\n  MatPseudoCheckbox.prototype.state;\n  /**\n   * Whether the checkbox is disabled.\n   * @type {?}\n   */\n\n  MatPseudoCheckbox.prototype.disabled;\n  /** @type {?} */\n\n  MatPseudoCheckbox.prototype._animationMode;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/selection/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatPseudoCheckboxModule = /*#__PURE__*/(() => {\n  class MatPseudoCheckboxModule {}\n\n  MatPseudoCheckboxModule.ɵfac = function MatPseudoCheckboxModule_Factory(t) {\n    return new (t || MatPseudoCheckboxModule)();\n  };\n\n  MatPseudoCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatPseudoCheckboxModule\n  });\n  MatPseudoCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return MatPseudoCheckboxModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPseudoCheckboxModule, {\n    declarations: [MatPseudoCheckbox],\n    exports: [MatPseudoCheckbox]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/option/optgroup.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatOptgroup.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatOptgroupBase {}\n/** @type {?} */\n\n\nconst _MatOptgroupMixinBase = /*#__PURE__*/mixinDisabled(MatOptgroupBase); // Counter for unique group ids.\n\n/** @type {?} */\n\n\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\n\nlet MatOptgroup = /*#__PURE__*/(() => {\n  class MatOptgroup extends _MatOptgroupMixinBase {\n    constructor() {\n      super(...arguments);\n      /**\n       * Unique id for the underlying label.\n       */\n\n      this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n    }\n\n  }\n\n  MatOptgroup.ɵfac = /*@__PURE__*/function () {\n    let ɵMatOptgroup_BaseFactory;\n    return function MatOptgroup_Factory(t) {\n      return (ɵMatOptgroup_BaseFactory || (ɵMatOptgroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatOptgroup)))(t || MatOptgroup);\n    };\n  }();\n\n  MatOptgroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatOptgroup,\n    selectors: [[\"mat-optgroup\"]],\n    hostAttrs: [\"role\", \"group\", 1, \"mat-optgroup\"],\n    hostVars: 4,\n    hostBindings: function MatOptgroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled.toString())(\"aria-labelledby\", ctx._labelId);\n        ɵngcc0.ɵɵclassProp(\"mat-optgroup-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      label: \"label\"\n    },\n    exportAs: [\"matOptgroup\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"mat-optgroup-label\", 3, \"id\"]],\n    template: function MatOptgroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx._labelId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n      }\n    },\n    styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatOptgroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatOptgroup.ngAcceptInputType_disabled;\n  /**\n   * Label for the option group.\n   * @type {?}\n   */\n\n  MatOptgroup.prototype.label;\n  /**\n   * Unique id for the underlying label.\n   * @type {?}\n   */\n\n  MatOptgroup.prototype._labelId;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/option/option.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\n\n\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\n\nclass MatOptionSelectionChange {\n  /**\n   * @param {?} source\n   * @param {?=} isUserInput\n   */\n  constructor(source, isUserInput = false) {\n    this.source = source;\n    this.isUserInput = isUserInput;\n  }\n\n}\n\nif (false) {\n  /**\n   * Reference to the option that emitted the event.\n   * @type {?}\n   */\n  MatOptionSelectionChange.prototype.source;\n  /**\n   * Whether the change in the option's value was a result of a user action.\n   * @type {?}\n   */\n\n  MatOptionSelectionChange.prototype.isUserInput;\n}\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * \\@docs-private\n * @record\n */\n\n\nfunction MatOptionParentComponent() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  MatOptionParentComponent.prototype.disableRipple;\n  /** @type {?|undefined} */\n\n  MatOptionParentComponent.prototype.multiple;\n}\n/**\n * Injection token used to provide the parent component to options.\n * @type {?}\n */\n\n\nconst MAT_OPTION_PARENT_COMPONENT = /*#__PURE__*/new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n/**\n * Single option inside of a `<mat-select>` element.\n */\n\nlet MatOption = /*#__PURE__*/(() => {\n  class MatOption {\n    /**\n     * @param {?} _element\n     * @param {?} _changeDetectorRef\n     * @param {?} _parent\n     * @param {?} group\n     */\n    constructor(_element, _changeDetectorRef, _parent, group) {\n      this._element = _element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._parent = _parent;\n      this.group = group;\n      this._selected = false;\n      this._active = false;\n      this._disabled = false;\n      this._mostRecentViewValue = '';\n      /**\n       * The unique ID of the option.\n       */\n\n      this.id = `mat-option-${_uniqueIdCounter++}`;\n      /**\n       * Event emitted when the option is selected or deselected.\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onSelectionChange = new EventEmitter();\n      /**\n       * Emits when the state of the option changes and any parents have to be notified.\n       */\n\n      this._stateChanges = new Subject();\n    }\n    /**\n     * Whether the wrapping component is in multiple selection mode.\n     * @return {?}\n     */\n\n\n    get multiple() {\n      return this._parent && this._parent.multiple;\n    }\n    /**\n     * Whether or not the option is currently selected.\n     * @return {?}\n     */\n\n\n    get selected() {\n      return this._selected;\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this.group && this.group.disabled || this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether ripples for the option are disabled.\n     * @return {?}\n     */\n\n\n    get disableRipple() {\n      return this._parent && this._parent.disableRipple;\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     * @return {?}\n     */\n\n\n    get active() {\n      return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     * @return {?}\n     */\n\n\n    get viewValue() {\n      // TODO(kara): Add input property alternative for node envs.\n      return (this._getHostElement().textContent || '').trim();\n    }\n    /**\n     * Selects the option.\n     * @return {?}\n     */\n\n\n    select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._changeDetectorRef.markForCheck();\n\n        this._emitSelectionChangeEvent();\n      }\n    }\n    /**\n     * Deselects the option.\n     * @return {?}\n     */\n\n\n    deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._changeDetectorRef.markForCheck();\n\n        this._emitSelectionChangeEvent();\n      }\n    }\n    /**\n     * Sets focus onto this option.\n     * @param {?=} _origin\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    focus(_origin, options) {\n      // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n      // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n\n      /** @type {?} */\n      const element = this._getHostElement();\n\n      if (typeof element.focus === 'function') {\n        element.focus(options);\n      }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n\n\n    setActiveStyles() {\n      if (!this._active) {\n        this._active = true;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n\n\n    setInactiveStyles() {\n      if (this._active) {\n        this._active = false;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n\n\n    getLabel() {\n      return this.viewValue;\n    }\n    /**\n     * Ensures the option is selected when activated from the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleKeydown(event) {\n      if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n        this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.\n\n\n        event.preventDefault();\n      }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     * @return {?}\n     */\n\n\n    _selectViaInteraction() {\n      if (!this.disabled) {\n        this._selected = this.multiple ? !this._selected : true;\n\n        this._changeDetectorRef.markForCheck();\n\n        this._emitSelectionChangeEvent(true);\n      }\n    }\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     * @return {?}\n     */\n\n\n    _getAriaSelected() {\n      return this.selected || (this.multiple ? false : null);\n    }\n    /**\n     * Returns the correct tabindex for the option depending on disabled state.\n     * @return {?}\n     */\n\n\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Gets the host DOM element.\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this._element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewChecked() {\n      // Since parent components could be using the option's label to display the selected values\n      // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n      // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n      // relatively cheap, however we still limit them only to selected options in order to avoid\n      // hitting the DOM too often.\n      if (this._selected) {\n        /** @type {?} */\n        const viewValue = this.viewValue;\n\n        if (viewValue !== this._mostRecentViewValue) {\n          this._mostRecentViewValue = viewValue;\n\n          this._stateChanges.next();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /**\n     * Emits the selection change event.\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n\n    _emitSelectionChangeEvent(isUserInput = false) {\n      this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n\n  }\n\n  MatOption.ɵfac = function MatOption_Factory(t) {\n    return new (t || MatOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(MatOptgroup, 8));\n  };\n\n  MatOption.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatOption,\n    selectors: [[\"mat-option\"]],\n    hostAttrs: [\"role\", \"option\", 1, \"mat-option\"],\n    hostVars: 12,\n    hostBindings: function MatOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() {\n          return ctx._selectViaInteraction();\n        })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-selected\", ctx._getAriaSelected())(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-selected\", ctx.selected)(\"mat-option-multiple\", ctx.multiple)(\"mat-active\", ctx.active)(\"mat-option-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      disabled: \"disabled\",\n      value: \"value\"\n    },\n    outputs: {\n      onSelectionChange: \"onSelectionChange\"\n    },\n    exportAs: [\"matOption\"],\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 3,\n    consts: [[\"class\", \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-option-text\"], [\"mat-ripple\", \"\", 1, \"mat-option-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\"]],\n    template: function MatOption_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, \"mat-pseudo-checkbox\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n      }\n    },\n    directives: [ɵngcc3.NgIf, MatRipple, MatPseudoCheckbox],\n    styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatOption;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatOption.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._active;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._mostRecentViewValue;\n  /**\n   * The form value of the option.\n   * @type {?}\n   */\n\n  MatOption.prototype.value;\n  /**\n   * The unique ID of the option.\n   * @type {?}\n   */\n\n  MatOption.prototype.id;\n  /**\n   * Event emitted when the option is selected or deselected.\n   * @type {?}\n   */\n\n  MatOption.prototype.onSelectionChange;\n  /**\n   * Emits when the state of the option changes and any parents have to be notified.\n   * @type {?}\n   */\n\n  MatOption.prototype._stateChanges;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatOption.prototype._parent;\n  /** @type {?} */\n\n  MatOption.prototype.group;\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * \\@docs-private\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\n\n\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    /** @type {?} */\n    let optionsArray = options.toArray();\n    /** @type {?} */\n\n    let groups = optionGroups.toArray();\n    /** @type {?} */\n\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * \\@docs-private\n * @param {?} optionIndex Index of the option to be scrolled into the view.\n * @param {?} optionHeight Height of the options.\n * @param {?} currentScrollPosition Current scroll position of the panel.\n * @param {?} panelHeight Height of the panel.\n * @return {?}\n */\n\n\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n  /** @type {?} */\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/option/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatOptionModule = /*#__PURE__*/(() => {\n  class MatOptionModule {}\n\n  MatOptionModule.ɵfac = function MatOptionModule_Factory(t) {\n    return new (t || MatOptionModule)();\n  };\n\n  MatOptionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatOptionModule\n  });\n  MatOptionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatRippleModule, CommonModule, MatPseudoCheckboxModule]]\n  });\n  return MatOptionModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatOptionModule, {\n    declarations: function () {\n      return [MatOption, MatOptgroup];\n    },\n    imports: function () {\n      return [MatRippleModule, CommonModule, MatPseudoCheckboxModule];\n    },\n    exports: function () {\n      return [MatOption, MatOptgroup];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/label/label-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * InjectionToken that can be used to specify the global label options.\n * @type {?}\n */\n\n\nconst MAT_LABEL_GLOBAL_OPTIONS = /*#__PURE__*/new InjectionToken('mat-label-global-options');\n/**\n * Configurable options for floating labels.\n * @record\n */\n\nfunction LabelOptions() {}\n\nif (false) {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   * @type {?|undefined}\n   */\n  LabelOptions.prototype.float;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/month-constants.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * \\@docs-private\n * \\@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n * @type {?}\n */\n\n\nconst JAN = 0;\n/** @type {?} */\n\nconst FEB = 1;\n/** @type {?} */\n\nconst MAR = 2;\n/** @type {?} */\n\nconst APR = 3;\n/** @type {?} */\n\nconst MAY = 4;\n/** @type {?} */\n\nconst JUN = 5;\n/** @type {?} */\n\nconst JUL = 6;\n/** @type {?} */\n\nconst AUG = 7;\n/** @type {?} */\n\nconst SEP = 8;\n/** @type {?} */\n\nconst OCT = 9;\n/** @type {?} */\n\nconst NOV = 10;\n/** @type {?} */\n\nconst DEC = 11;\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APR, AUG, AnimationCurves, AnimationDurations, DEC, DateAdapter, ErrorStateMatcher, FEB, GestureConfig, JAN, JUL, JUN, MAR, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE_PROVIDER, MAT_HAMMER_OPTIONS, MAT_LABEL_GLOBAL_OPTIONS, MAT_NATIVE_DATE_FORMATS, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MAY, MatCommonModule, MatLine, MatLineModule, MatLineSetter, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NOV, NativeDateAdapter, NativeDateModule, OCT, RippleRef, RippleRenderer, RippleState, SEP, ShowOnDirtyErrorStateMatcher, VERSION, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, MATERIAL_SANITY_CHECKS_FACTORY as ɵangular_material_src_material_core_core_a }; //# sourceMappingURL=core.js.map","map":null,"metadata":{},"sourceType":"module"}