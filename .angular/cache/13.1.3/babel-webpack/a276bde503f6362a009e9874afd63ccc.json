{"ast":null,"code":"import { SecurityContext, Injectable, Optional, Inject, ErrorHandler, ɵɵdefineInjectable, ɵɵinject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { of, throwError, forkJoin } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Options that can be used to configure how an icon or the icons in an icon set are presented.\n * @record\n */\n\n\nfunction IconOptions() {}\n\nif (false) {\n  /**\n   * View box to set on the icon.\n   * @type {?|undefined}\n   */\n  IconOptions.prototype.viewBox;\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nclass SvgIconConfig {\n  /**\n   * @param {?} data\n   * @param {?=} options\n   */\n  constructor(data, options) {\n    this.options = options; // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n\n    if (!!\n    /** @type {?} */\n    data.nodeName) {\n      this.svgElement =\n      /** @type {?} */\n      data;\n    } else {\n      this.url =\n      /** @type {?} */\n      data;\n    }\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  SvgIconConfig.prototype.url;\n  /** @type {?} */\n\n  SvgIconConfig.prototype.svgElement;\n  /** @type {?} */\n\n  SvgIconConfig.prototype.options;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nlet MatIconRegistry = /*#__PURE__*/(() => {\n  class MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      this._errorHandler = _errorHandler;\n      /**\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n       */\n\n      this._svgIconConfigs = new Map();\n      /**\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n       * Multiple icon sets can be registered under the same namespace.\n       */\n\n      this._iconSetConfigs = new Map();\n      /**\n       * Cache for icons loaded by direct URLs.\n       */\n\n      this._cachedIconsByUrl = new Map();\n      /**\n       * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n       */\n\n      this._inProgressUrlFetches = new Map();\n      /**\n       * Map from font identifiers to their CSS class names. Used for icon fonts.\n       */\n\n      this._fontCssClassesByAlias = new Map();\n      /**\n       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n       * The default 'material-icons' value assumes that the material icon font has been loaded as\n       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n       */\n\n      this._defaultFontSetClass = 'material-icons';\n      this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIcon(iconName, url, options) {\n      return (\n        /** @type {?} */\n        this.addSvgIconInNamespace('', iconName, url, options)\n      );\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconLiteral(iconName, literal, options) {\n      return (\n        /** @type {?} */\n        this.addSvgIconLiteralInNamespace('', iconName, literal, options)\n      );\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n      return (\n        /** @type {?} */\n        this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options))\n      );\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n      /** @type {?} */\n      const sanitizedLiteral =\n      /** @type {?} */\n      this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      const svgElement =\n      /** @type {?} */\n      this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n\n      return (\n        /** @type {?} */\n        this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options))\n      );\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconSet(url, options) {\n      return (\n        /** @type {?} */\n        this.addSvgIconSetInNamespace('', url, options)\n      );\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconSetLiteral(literal, options) {\n      return (\n        /** @type {?} */\n        this.addSvgIconSetLiteralInNamespace('', literal, options)\n      );\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconSetInNamespace(namespace, url, options) {\n      return (\n        /** @type {?} */\n        this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options))\n      );\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n\n\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n      /** @type {?} */\n      const sanitizedLiteral =\n      /** @type {?} */\n      this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      const svgElement =\n      /** @type {?} */\n      this._svgElementFromString(sanitizedLiteral);\n\n      return (\n        /** @type {?} */\n        this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options))\n      );\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n\n\n    registerFontClassAlias(alias, className = alias) {\n      /** @type {?} */\n      this._fontCssClassesByAlias.set(alias, className);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n\n\n    classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n\n\n    setDefaultFontSetClass(className) {\n      /** @type {?} */\n      this._defaultFontSetClass = className;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n\n\n    getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n\n\n    getSvgIconFromUrl(safeUrl) {\n      /** @type {?} */\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      /** @type {?} */\n\n\n      const cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => this._cachedIconsByUrl.set(\n      /** @type {?} */\n      url, svg)), map(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n\n\n    getNamedSvgIcon(name, namespace = '') {\n      // Return (copy of) cached icon if possible.\n\n      /** @type {?} */\n      const key = iconKey(namespace, name);\n      /** @type {?} */\n\n      const config = this._svgIconConfigs.get(key);\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      } // See if we have any icon sets registered for the namespace.\n\n      /** @type {?} */\n\n\n      const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._svgIconConfigs.clear();\n\n      this._iconSetConfigs.clear();\n\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n\n    _getSvgFromConfig(config) {\n      if (config.svgElement) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(config.svgElement));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(tap(\n        /**\n        * @param {?} svg\n        * @return {?}\n        */\n        svg => config.svgElement = svg), map(\n        /**\n        * @param {?} svg\n        * @return {?}\n        */\n        svg => cloneSvg(svg)));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n\n      /** @type {?} */\n      const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n\n      /** @type {?} */\n\n\n      const iconSetFetchRequests = iconSetConfigs.filter(\n      /**\n      * @param {?} iconSetConfig\n      * @return {?}\n      */\n      iconSetConfig => !iconSetConfig.svgElement).map(\n      /**\n      * @param {?} iconSetConfig\n      * @return {?}\n      */\n      iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        err => {\n          /** @type {?} */\n          const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n          /** @type {?} */\n\n\n          const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`; // @breaking-change 9.0.0 _errorHandler parameter to be made required\n\n          if (this._errorHandler) {\n            this._errorHandler.handleError(new Error(errorMessage));\n          } else {\n            console.error(errorMessage);\n          }\n\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        const config = iconSetConfigs[i];\n\n        if (config.svgElement) {\n          /** @type {?} */\n          const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n\n    _loadSvgIconFromConfig(config) {\n      return this._fetchUrl(config.url).pipe(map(\n      /**\n      * @param {?} svgText\n      * @return {?}\n      */\n      svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n\n    _loadSvgIconSetFromConfig(config) {\n      // If the SVG for this icon set has already been parsed, do nothing.\n      if (config.svgElement) {\n        return of(config.svgElement);\n      }\n\n      return this._fetchUrl(config.url).pipe(map(\n      /**\n      * @param {?} svgText\n      * @return {?}\n      */\n      svgText => {\n        // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n        // only needs to occur if the cache is yet unset.\n        if (!config.svgElement) {\n          config.svgElement = this._svgElementFromString(svgText);\n        }\n\n        return config.svgElement;\n      }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    _createSvgElementForSingleIcon(responseText, options) {\n      /** @type {?} */\n      const svg = this._svgElementFromString(responseText);\n\n      this._setSvgAttributes(svg, options);\n\n      return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n      // Use the `id=\"iconName\"` syntax in order to escape special\n      // characters in the ID (versus using the #iconName syntax).\n\n      /** @type {?} */\n      const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n      if (!iconSource) {\n        return null;\n      } // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n\n      /** @type {?} */\n\n\n      const iconElement =\n      /** @type {?} */\n      iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(\n        /** @type {?} */\n        iconElement, options);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n      } // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n      /** @type {?} */\n\n\n      const svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n\n\n    _svgElementFromString(str) {\n      /** @type {?} */\n      const div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      /** @type {?} */\n\n      const svg =\n      /** @type {?} */\n      div.querySelector('svg');\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _toSvgElement(element) {\n      /** @type {?} */\n      const svg = this._svgElementFromString('<svg></svg>');\n      /** @type {?} */\n\n\n      const attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n      for (let i = 0; i < attributes.length; i++) {\n        const {\n          name,\n          value\n        } = attributes[i];\n\n        if (name !== 'id') {\n          svg.setAttribute(name, value);\n        }\n      }\n\n      for (let i = 0; i < element.childNodes.length; i++) {\n        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    _setSvgAttributes(svg, options) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      if (options && options.viewBox) {\n        svg.setAttribute('viewBox', options.viewBox);\n      }\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n\n\n    _fetchUrl(safeUrl) {\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      }\n\n      if (safeUrl == null) {\n        throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n      }\n      /** @type {?} */\n\n\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n      /** @type {?} */\n\n\n      const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      } // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n      // Observable. Figure out why and fix it.\n\n      /** @type {?} */\n\n\n      const req = this._httpClient.get(url, {\n        responseType: 'text'\n      }).pipe(finalize(\n      /**\n      * @return {?}\n      */\n      () => this._inProgressUrlFetches.delete(url)), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n\n\n    _addSvgIconConfig(namespace, iconName, config) {\n      /** @type {?} */\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n\n\n    _addSvgIconSetConfig(namespace, config) {\n      /** @type {?} */\n      const configNamespace =\n      /** @type {?} */\n      this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        /** @type {?} */\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n\n  }\n\n  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  MatIconRegistry.ɵprov = ɵɵdefineInjectable({\n    factory: function MatIconRegistry_Factory() {\n      return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8));\n    },\n    token: MatIconRegistry,\n    providedIn: \"root\"\n  });\n  return MatIconRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatIconRegistry.prototype._document;\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._svgIconConfigs;\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._iconSetConfigs;\n  /**\n   * Cache for icons loaded by direct URLs.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._cachedIconsByUrl;\n  /**\n   * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._inProgressUrlFetches;\n  /**\n   * Map from font identifiers to their CSS class names. Used for icon fonts.\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._fontCssClassesByAlias;\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._defaultFontSetClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._httpClient;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._sanitizer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIconRegistry.prototype._errorHandler;\n}\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatIconRegistry], [/*#__PURE__*/new Optional(), HttpClient], DomSanitizer, [/*#__PURE__*/new Optional(), ErrorHandler], [/*#__PURE__*/new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatIconBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  MatIconBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nconst _MatIconMixinBase = /*#__PURE__*/mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_ICON_LOCATION = /*#__PURE__*/new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatIcon`.\n * \\@docs-private\n * @record\n */\n\nfunction MatIconLocation() {}\n\nif (false) {\n  /** @type {?} */\n  MatIconLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n  /** @type {?} */\n\n\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname:\n    /**\n    * @return {?}\n    */\n    () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\n\n\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nconst ɵ0 =\n/**\n* @param {?} attr\n* @return {?}\n*/\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\n\n\nconst funcIriAttributeSelector = /*#__PURE__*/ /*#__PURE__*/funcIriAttributes.map(ɵ0).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\n\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nlet MatIcon = /*#__PURE__*/(() => {\n  class MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n      super(elementRef);\n      this._iconRegistry = _iconRegistry;\n      this._location = _location;\n      this._errorHandler = _errorHandler;\n      this._inline = false; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n\n\n    get inline() {\n      return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n\n\n    set inline(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n\n\n    get fontSet() {\n      return this._fontSet;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fontSet(value) {\n      this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n\n\n    get fontIcon() {\n      return this._fontIcon;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fontIcon(value) {\n      this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n\n\n    _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n      /** @type {?} */\n\n\n      const parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return (\n            /** @type {?} */\n            parts\n          );\n\n        default:\n          throw Error(`Invalid icon name: \"${iconName}\"`);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n\n      /** @type {?} */\n      const svgIconChanges = changes['svgIcon'];\n\n      if (svgIconChanges) {\n        if (this.svgIcon) {\n          const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n          this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          /**\n          * @param {?} svg\n          * @return {?}\n          */\n          svg => this._setSvgElement(svg),\n          /**\n          * @param {?} err\n          * @return {?}\n          */\n          err => {\n            /** @type {?} */\n            const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`; // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n          });\n        } else if (svgIconChanges.previousValue) {\n          this._clearSvgElement();\n        }\n      }\n\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewChecked() {\n      /** @type {?} */\n      const cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && this._location && cachedElements.size) {\n        /** @type {?} */\n        const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _usingFontIcon() {\n      return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n\n\n    _setSvgElement(svg) {\n      this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n      // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n      /** @type {?} */\n\n\n      const styleTags =\n      /** @type {?} */\n      svg.querySelectorAll('style');\n\n      for (let i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      } // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      if (this._location) {\n        /** @type {?} */\n        const path = this._location.getPathname();\n\n        this._previousPath = path;\n\n        this._cacheChildrenWithExternalReferences(svg);\n\n        this._prependPathToReferences(path);\n      }\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _clearSvgElement() {\n      /** @type {?} */\n      const layoutElement = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      let childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        /** @type {?} */\n        const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const elem = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n      if (fontSetClass != this._previousFontSetClass) {\n        if (this._previousFontSetClass) {\n          elem.classList.remove(this._previousFontSetClass);\n        }\n\n        if (fontSetClass) {\n          elem.classList.add(fontSetClass);\n        }\n\n        this._previousFontSetClass = fontSetClass;\n      }\n\n      if (this.fontIcon != this._previousFontIconClass) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n\n\n    _prependPathToReferences(path) {\n      /** @type {?} */\n      const elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach(\n        /**\n        * @param {?} attrs\n        * @param {?} element\n        * @return {?}\n        */\n        (attrs, element) => {\n          attrs.forEach(\n          /**\n          * @param {?} attr\n          * @return {?}\n          */\n          attr => {\n            element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _cacheChildrenWithExternalReferences(element) {\n      /** @type {?} */\n      const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      /** @type {?} */\n\n      const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      for (let i = 0; i < elementsWithFuncIri.length; i++) {\n        funcIriAttributes.forEach(\n        /**\n        * @param {?} attr\n        * @return {?}\n        */\n        attr => {\n          /** @type {?} */\n          const elementWithReference = elementsWithFuncIri[i];\n          /** @type {?} */\n\n          const value = elementWithReference.getAttribute(attr);\n          /** @type {?} */\n\n          const match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            /** @type {?} */\n            let attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n\n            /** @type {?} */\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      }\n    }\n\n  }\n\n  MatIcon.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler, 8));\n  };\n\n  MatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n    hostVars: 4,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\",\n      svgIcon: \"svgIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatIcon;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatIcon.ngAcceptInputType_inline;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._inline;\n  /**\n   * Name of the icon in the SVG icon set.\n   * @type {?}\n   */\n\n  MatIcon.prototype.svgIcon;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._fontSet;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._fontIcon;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousFontSetClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousFontIconClass;\n  /**\n   * Keeps track of the current page path.\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._previousPath;\n  /**\n   * Keeps track of the elements and attributes that we've prefixed with the current path.\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._elementsWithExternalReferences;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._iconRegistry;\n  /**\n   * @deprecated `location` parameter to be made required.\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._location;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatIcon.prototype._errorHandler;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatIconModule = /*#__PURE__*/(() => {\n  class MatIconModule {}\n\n  MatIconModule.ɵfac = function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  };\n\n  MatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  MatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatIconModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError }; //# sourceMappingURL=icon.js.map","map":null,"metadata":{},"sourceType":"module"}