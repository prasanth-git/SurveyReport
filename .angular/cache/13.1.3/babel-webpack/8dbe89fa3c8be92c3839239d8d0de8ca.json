{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /**\n   * Animation that transitions a tooltip in and out.\n   */\n  tooltipState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('initial, void, hidden', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)'\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('200ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), /*#__PURE__*/style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), /*#__PURE__*/transition('* => hidden', /*#__PURE__*/animate('100ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\n\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Options used to bind passive event listeners.\n * @type {?}\n */\n\nconst passiveListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n * @type {?}\n */\n\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    })\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default `matTooltip` options that can be overridden.\n * @record\n */\n\nfunction MatTooltipDefaultOptions() {}\n\nif (false) {\n  /** @type {?} */\n  MatTooltipDefaultOptions.prototype.showDelay;\n  /** @type {?} */\n\n  MatTooltipDefaultOptions.prototype.hideDelay;\n  /** @type {?} */\n\n  MatTooltipDefaultOptions.prototype.touchendHideDelay;\n  /** @type {?|undefined} */\n\n  MatTooltipDefaultOptions.prototype.touchGestures;\n  /** @type {?|undefined} */\n\n  MatTooltipDefaultOptions.prototype.position;\n}\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\n\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nlet MatTooltip = /*#__PURE__*/(() => {\n  class MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     * @param {?=} _hammerLoader\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions,\n    /**\n     * @deprecated _hammerLoader parameter to be removed.\n     * @breaking-change 9.0.0\n     */\n    // Note that we need to give Angular something to inject here so it doesn't throw.\n    _hammerLoader) {\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      /**\n       * The default delay in ms before showing the tooltip after show is called\n       */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /**\n       * The default delay in ms before hiding the tooltip after hide is called\n       */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      /**\n       * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n       * uses a long press gesture to show and hide, however it can conflict with the native browser\n       * gestures. To work around the conflict, Angular Material disables native gestures on the\n       * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n       * elements). The different values for this option configure the touch event handling as follows:\n       * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n       *   browser gestures on particular elements. In particular, it allows text selection on inputs\n       *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n       * - `on` - Enables touch gestures for all elements and disables native\n       *   browser gestures with no exceptions.\n       * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n       *   showing on touch devices.\n       */\n\n      this.touchGestures = 'auto';\n      this._message = '';\n      /**\n       * Manually-bound passive event listeners.\n       */\n\n      this._passiveListeners = new Map();\n      /**\n       * Emits when the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * Handles the keydown events on the host element.\n       * Needs to be an arrow function so that we can use it in addEventListener.\n       */\n\n      this._handleKeydown =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          this._ngZone.run(\n          /**\n          * @return {?}\n          */\n          () => this.hide(0));\n        }\n      };\n\n      this._scrollStrategy = scrollStrategy;\n\n      if (_defaultOptions) {\n        if (_defaultOptions.position) {\n          this.position = _defaultOptions.position;\n        }\n\n        if (_defaultOptions.touchGestures) {\n          this.touchGestures = _defaultOptions.touchGestures;\n        }\n      }\n\n      _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} origin\n      * @return {?}\n      */\n      origin => {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          _ngZone.run(\n          /**\n          * @return {?}\n          */\n          () => this.hide(0));\n        } else if (origin === 'keyboard') {\n          _ngZone.run(\n          /**\n          * @return {?}\n          */\n          () => this.show());\n        }\n      });\n\n      _ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n      });\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n\n\n    get position() {\n      return this._position;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set position(value) {\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition();\n\n          if (this._tooltipInstance) {\n            /** @type {?} */\n            this._tooltipInstance.show(0);\n          }\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n\n\n    get message() {\n      return this._message;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set message(value) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n      this._message = value != null ? `${value}`.trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._updateTooltipMessage();\n\n        this._ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => {\n          // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n          // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n          // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n          // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          () => {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n          });\n        });\n      }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n\n\n    get tooltipClass() {\n      return this._tooltipClass;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set tooltipClass(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n    /**\n     * Setup styling-specific things\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      // This needs to happen in `ngOnInit` so the initial values for all inputs have been set.\n      this._setupPointerEvents();\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      /** @type {?} */\n      const nativeElement = this._elementRef.nativeElement;\n      clearTimeout(this._touchstartTimeout);\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n      this._passiveListeners.forEach(\n      /**\n      * @param {?} listener\n      * @param {?} event\n      * @return {?}\n      */\n      (listener, event) => {\n        nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n      });\n\n      this._passiveListeners.clear();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(nativeElement, this.message);\n\n      this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n\n    show(delay = this.showDelay) {\n      if (this.disabled || !this.message || this._isTooltipVisible() && !\n      /** @type {?} */\n      this._tooltipInstance._showTimeoutId && !\n      /** @type {?} */\n      this._tooltipInstance._hideTimeoutId) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._detach());\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n\n      /** @type {?} */\n      this._tooltipInstance.show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n\n    hide(delay = this.hideDelay) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n\n\n    toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n\n\n    _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n\n\n    _createOverlay() {\n      if (this._overlayRef) {\n        return this._overlayRef;\n      }\n      /** @type {?} */\n\n\n      const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n      /** @type {?} */\n\n\n      const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        if (this._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            this._ngZone.run(\n            /**\n            * @return {?}\n            */\n            () => this.hide(0));\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: TOOLTIP_PANEL_CLASS,\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition();\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._detach());\n\n      return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n\n\n    _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n\n\n    _updatePosition() {\n      /** @type {?} */\n      const position =\n      /** @type {?} */\n\n      /** @type {?} */\n      this._overlayRef.getConfig().positionStrategy;\n      /** @type {?} */\n\n\n      const origin = this._getOrigin();\n      /** @type {?} */\n\n\n      const overlay = this._getOverlayPosition();\n\n      position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n\n\n    _getOrigin() {\n      /** @type {?} */\n      const isLtr = !this._dir || this._dir.value == 'ltr';\n      /** @type {?} */\n\n      const position = this.position;\n      /** @type {?} */\n\n      let originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      const {\n        x,\n        y\n      } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n\n\n    _getOverlayPosition() {\n      /** @type {?} */\n      const isLtr = !this._dir || this._dir.value == 'ltr';\n      /** @type {?} */\n\n      const position = this.position;\n      /** @type {?} */\n\n      let overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      const {\n        x,\n        y\n      } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n\n\n    _updateTooltipMessage() {\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          if (this._tooltipInstance) {\n            /** @type {?} */\n            this._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n\n\n    _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n\n\n    _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x,\n        y\n      };\n    }\n    /**\n     * Binds the pointer events to the tooltip trigger.\n     * @private\n     * @return {?}\n     */\n\n\n    _setupPointerEvents() {\n      // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n      // first tap from firing its click event or can cause the tooltip to open for clicks.\n      if (!this._platform.IOS && !this._platform.ANDROID) {\n        this._passiveListeners.set('mouseenter',\n        /**\n        * @return {?}\n        */\n        () => this.show()).set('mouseleave',\n        /**\n        * @return {?}\n        */\n        () => this.hide());\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n        /** @type {?} */\n\n\n        const touchendListener =\n        /**\n        * @return {?}\n        */\n        () => {\n          clearTimeout(this._touchstartTimeout);\n          this.hide(this._defaultOptions.touchendHideDelay);\n        };\n\n        this._passiveListeners.set('touchend', touchendListener).set('touchcancel', touchendListener).set('touchstart',\n        /**\n        * @return {?}\n        */\n        () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          clearTimeout(this._touchstartTimeout);\n          this._touchstartTimeout = setTimeout(\n          /**\n          * @return {?}\n          */\n          () => this.show(), LONGPRESS_DELAY);\n        });\n      }\n\n      this._passiveListeners.forEach(\n      /**\n      * @param {?} listener\n      * @param {?} event\n      * @return {?}\n      */\n      (listener, event) => {\n        this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n      });\n    }\n    /**\n     * Disables the native browser gestures, based on how the tooltip has been configured.\n     * @private\n     * @return {?}\n     */\n\n\n    _disableNativeGesturesIfNecessary() {\n      /** @type {?} */\n      const element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      const style = element.style;\n      /** @type {?} */\n\n      const gestures = this.touchGestures;\n\n      if (gestures !== 'off') {\n        // If gestures are set to `auto`, we don't disable text selection on inputs and\n        // textareas, because it prevents the user from typing into them on iOS Safari.\n        if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n          style.userSelect = style.msUserSelect = style.webkitUserSelect =\n          /** @type {?} */\n          style.MozUserSelect = 'none';\n        } // If we have `auto` gestures and the element uses native HTML dragging,\n        // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n        if (gestures === 'on' || !element.draggable) {\n          /** @type {?} */\n          style.webkitUserDrag = 'none';\n        }\n\n        style.touchAction = 'none';\n        style.webkitTapHighlightColor = 'transparent';\n      }\n    }\n\n  }\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n  };\n\n  MatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n  /** @nocollapse */\n\n  return MatTooltip;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatTooltip.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatTooltip.ngAcceptInputType_hideDelay;\n  /** @type {?} */\n\n  MatTooltip.ngAcceptInputType_showDelay;\n  /** @type {?} */\n\n  MatTooltip.prototype._overlayRef;\n  /** @type {?} */\n\n  MatTooltip.prototype._tooltipInstance;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._portal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._position;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._tooltipClass;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._scrollStrategy;\n  /**\n   * The default delay in ms before showing the tooltip after show is called\n   * @type {?}\n   */\n\n  MatTooltip.prototype.showDelay;\n  /**\n   * The default delay in ms before hiding the tooltip after hide is called\n   * @type {?}\n   */\n\n  MatTooltip.prototype.hideDelay;\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n   * - `on` - Enables touch gestures for all elements and disables native\n   *   browser gestures with no exceptions.\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n   *   showing on touch devices.\n   * @type {?}\n   */\n\n  MatTooltip.prototype.touchGestures;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._message;\n  /**\n   * Manually-bound passive event listeners.\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._passiveListeners;\n  /**\n   * Timer started at the last `touchstart` event.\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._touchstartTimeout;\n  /**\n   * Emits when the component is destroyed.\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._destroyed;\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._handleKeydown;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._scrollDispatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._platform;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._ariaDescriber;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._dir;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatTooltip.prototype._defaultOptions;\n}\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\n\n\nlet TooltipComponent = /*#__PURE__*/(() => {\n  class TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._breakpointObserver = _breakpointObserver;\n      /**\n       * Property watched by the animation framework to show or hide the tooltip\n       */\n\n      this._visibility = 'initial';\n      /**\n       * Whether interactions on the page should close the tooltip\n       */\n\n      this._closeOnInteraction = false;\n      /**\n       * Subject for notifying that the tooltip has been hidden from the view\n       */\n\n      this._onHide = new Subject();\n      /**\n       * Stream that emits whether the user has a handset-sized display.\n       */\n\n      this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n\n\n    show(delay) {\n      // Cancel the delayed hide if it is scheduled\n      if (this._hideTimeoutId) {\n        clearTimeout(this._hideTimeoutId);\n        this._hideTimeoutId = null;\n      } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._visibility = 'visible';\n        this._showTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        this._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n\n\n    hide(delay) {\n      // Cancel the delayed show if it is scheduled\n      if (this._showTimeoutId) {\n        clearTimeout(this._showTimeoutId);\n        this._showTimeoutId = null;\n      }\n\n      this._hideTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._visibility = 'hidden';\n        this._hideTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        this._markForCheck();\n      }, delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n\n\n    afterHidden() {\n      return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n\n\n    isVisible() {\n      return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _animationStart() {\n      this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _animationDone(event) {\n      /** @type {?} */\n      const toState =\n      /** @type {?} */\n      event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n\n\n    _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n\n\n    _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return TooltipComponent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Message to display in the tooltip\n   * @type {?}\n   */\n  TooltipComponent.prototype.message;\n  /**\n   * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n   * @type {?}\n   */\n\n  TooltipComponent.prototype.tooltipClass;\n  /**\n   * The timeout ID of any current timer set to show the tooltip\n   * @type {?}\n   */\n\n  TooltipComponent.prototype._showTimeoutId;\n  /**\n   * The timeout ID of any current timer set to hide the tooltip\n   * @type {?}\n   */\n\n  TooltipComponent.prototype._hideTimeoutId;\n  /**\n   * Property watched by the animation framework to show or hide the tooltip\n   * @type {?}\n   */\n\n  TooltipComponent.prototype._visibility;\n  /**\n   * Whether interactions on the page should close the tooltip\n   * @type {?}\n   * @private\n   */\n\n  TooltipComponent.prototype._closeOnInteraction;\n  /**\n   * Subject for notifying that the tooltip has been hidden from the view\n   * @type {?}\n   * @private\n   */\n\n  TooltipComponent.prototype._onHide;\n  /**\n   * Stream that emits whether the user has a handset-sized display.\n   * @type {?}\n   */\n\n  TooltipComponent.prototype._isHandset;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipComponent.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipComponent.prototype._breakpointObserver;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatTooltipModule = /*#__PURE__*/(() => {\n  class MatTooltipModule {}\n\n  MatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  };\n\n  MatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTooltipModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations }; //# sourceMappingURL=tooltip.js.map","map":null,"metadata":{},"sourceType":"module"}