{"ast":null,"code":"import { NgModule, Injectable, ɵɵdefineInjectable, ɵɵinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/layout-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nlet LayoutModule = /*#__PURE__*/(() => {\n  class LayoutModule {}\n\n  LayoutModule.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n\n  LayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return LayoutModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/media-matcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\n\n\nconst mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\n\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\n\nlet MediaMatcher = /*#__PURE__*/(() => {\n  class MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n      this._platform = _platform;\n      this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n\n\n    matchMedia(query) {\n      if (this._platform.WEBKIT) {\n        createEmptyStyleRule(query);\n      }\n\n      return this._matchMedia(query);\n    }\n\n  }\n\n  MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n    return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  MediaMatcher.ɵprov = ɵɵdefineInjectable({\n    factory: function MediaMatcher_Factory() {\n      return new MediaMatcher(ɵɵinject(Platform));\n    },\n    token: MediaMatcher,\n    providedIn: \"root\"\n  });\n  return MediaMatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * The internal matchMedia method to return back a MediaQueryList like object.\n   * @type {?}\n   * @private\n   */\n  MediaMatcher.prototype._matchMedia;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n\n      /** @type {?} */\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      /** @type {?} */\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return (\n    /** @type {?} */\n    {\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener:\n      /**\n      * @return {?}\n      */\n      () => {},\n      removeListener:\n      /**\n      * @return {?}\n      */\n      () => {}\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The current state of a layout breakpoint.\n * @record\n */\n\n\nfunction BreakpointState() {}\n\nif (false) {\n  /**\n   * Whether the breakpoint is currently matching.\n   * @type {?}\n   */\n  BreakpointState.prototype.matches;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   * @type {?}\n   */\n\n  BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\n\n\nfunction InternalBreakpointState() {}\n\nif (false) {\n  /**\n   * Whether the breakpoint is currently matching.\n   * @type {?}\n   */\n  InternalBreakpointState.prototype.matches;\n  /**\n   * The media query being to be matched\n   * @type {?}\n   */\n\n  InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\n\n\nfunction Query() {}\n\nif (false) {\n  /** @type {?} */\n  Query.prototype.observable;\n  /** @type {?} */\n\n  Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\n\n\nlet BreakpointObserver = /*#__PURE__*/(() => {\n  class BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n      this._mediaMatcher = _mediaMatcher;\n      this._zone = _zone;\n      /**\n       * A map of all media queries currently being listened for.\n       */\n\n      this._queries = new Map();\n      /**\n       * A subject for all other observables to takeUntil based on.\n       */\n\n      this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroySubject.next();\n\n      this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n\n\n    isMatched(value) {\n      /** @type {?} */\n      const queries = splitQueries(coerceArray(value));\n      return queries.some(\n      /**\n      * @param {?} mediaQuery\n      * @return {?}\n      */\n      mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n\n\n    observe(value) {\n      /** @type {?} */\n      const queries = splitQueries(coerceArray(value));\n      /** @type {?} */\n\n      const observables = queries.map(\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      query => this._registerQuery(query).observable);\n      /** @type {?} */\n\n      let stateObservable = combineLatest(observables); // Emit the first state immediately, and then debounce the subsequent emissions.\n\n      stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n      return stateObservable.pipe(map(\n      /**\n      * @param {?} breakpointStates\n      * @return {?}\n      */\n      breakpointStates => {\n        /** @type {?} */\n        const response = {\n          matches: false,\n          breakpoints: {}\n        };\n        breakpointStates.forEach(\n        /**\n        * @param {?} state\n        * @return {?}\n        */\n        state => {\n          response.matches = response.matches || state.matches;\n          response.breakpoints[state.query] = state.matches;\n        });\n        return response;\n      }));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n\n\n    _registerQuery(query) {\n      // Only set up a new MediaQueryList if it is not already being listened for.\n      if (this._queries.has(query)) {\n        return (\n          /** @type {?} */\n          this._queries.get(query)\n        );\n      }\n      /** @type {?} */\n\n\n      const mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.\n\n      /** @type {?} */\n\n\n      const queryObservable = new Observable(\n      /**\n      * @param {?} observer\n      * @return {?}\n      */\n      observer => {\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n\n        /** @type {?} */\n        const handler =\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        e => this._zone.run(\n        /**\n        * @return {?}\n        */\n        () => observer.next(e));\n\n        mql.addListener(handler);\n        return (\n          /**\n          * @return {?}\n          */\n          () => {\n            mql.removeListener(handler);\n          }\n        );\n      }).pipe(startWith(mql), map(\n      /**\n      * @param {?} nextMql\n      * @return {?}\n      */\n      nextMql => ({\n        query,\n        matches: nextMql.matches\n      })), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n      /** @type {?} */\n\n      const output = {\n        observable: queryObservable,\n        mql\n      };\n\n      this._queries.set(query, output);\n\n      return output;\n    }\n\n  }\n\n  BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n    return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  BreakpointObserver.ɵprov = ɵɵdefineInjectable({\n    factory: function BreakpointObserver_Factory() {\n      return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone));\n    },\n    token: BreakpointObserver,\n    providedIn: \"root\"\n  });\n  return BreakpointObserver;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * A map of all media queries currently being listened for.\n   * @type {?}\n   * @private\n   */\n  BreakpointObserver.prototype._queries;\n  /**\n   * A subject for all other observables to takeUntil based on.\n   * @type {?}\n   * @private\n   */\n\n  BreakpointObserver.prototype._destroySubject;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  BreakpointObserver.prototype._mediaMatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.split(',')).reduce(\n  /**\n  * @param {?} a1\n  * @param {?} a2\n  * @return {?}\n  */\n  (a1, a2) => a1.concat(a2)).map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  query => query.trim());\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\n\n\nconst Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher }; //# sourceMappingURL=layout.js.map","map":null,"metadata":{},"sourceType":"module"}